
USB_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080057d4  080057d4  000157d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080057d8  080057d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  20000000  080057dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000018fc  200001e4  080059c0  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001ae0  080059c0  00021ae0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e70f  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b44  00000000  00000000  0003e921  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f18  00000000  00000000  00042468  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000da0  00000000  00000000  00043380  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003afd5  00000000  00000000  00044120  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001002d  00000000  00000000  0007f0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00172fbd  00000000  00000000  0008f122  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  002020df  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003d6c  00000000  00000000  0020215c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200001e4 	.word	0x200001e4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005764 	.word	0x08005764

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200001e8 	.word	0x200001e8
 80002d4:	08005764 	.word	0x08005764

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b2f      	ldr	r3, [pc, #188]	; (800039c <SystemInit+0xc4>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a2e      	ldr	r2, [pc, #184]	; (800039c <SystemInit+0xc4>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80002ec:	4b2b      	ldr	r3, [pc, #172]	; (800039c <SystemInit+0xc4>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a2a      	ldr	r2, [pc, #168]	; (800039c <SystemInit+0xc4>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80002f8:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <SystemInit+0xc8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a28      	ldr	r2, [pc, #160]	; (80003a0 <SystemInit+0xc8>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000304:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <SystemInit+0xc8>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <SystemInit+0xc8>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	4924      	ldr	r1, [pc, #144]	; (80003a0 <SystemInit+0xc8>)
 8000310:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <SystemInit+0xcc>)
 8000312:	4013      	ands	r3, r2
 8000314:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000316:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <SystemInit+0xc8>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <SystemInit+0xc8>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <SystemInit+0xc8>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <SystemInit+0xc8>)
 800032a:	2200      	movs	r2, #0
 800032c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800032e:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <SystemInit+0xc8>)
 8000330:	2200      	movs	r2, #0
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <SystemInit+0xc8>)
 8000336:	2200      	movs	r2, #0
 8000338:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <SystemInit+0xc8>)
 800033c:	2200      	movs	r2, #0
 800033e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <SystemInit+0xc8>)
 8000342:	2200      	movs	r2, #0
 8000344:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <SystemInit+0xc8>)
 8000348:	2200      	movs	r2, #0
 800034a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800034c:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <SystemInit+0xc8>)
 800034e:	2200      	movs	r2, #0
 8000350:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <SystemInit+0xc8>)
 8000354:	2200      	movs	r2, #0
 8000356:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <SystemInit+0xc8>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <SystemInit+0xc8>)
 800035e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000362:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <SystemInit+0xc8>)
 8000366:	2200      	movs	r2, #0
 8000368:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800036a:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <SystemInit+0xd0>)
 800036c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <SystemInit+0xd0>)
 8000370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000374:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <SystemInit+0xd4>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <SystemInit+0xd8>)
 800037c:	4013      	ands	r3, r2
 800037e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000382:	d202      	bcs.n	800038a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <SystemInit+0xdc>)
 8000386:	2201      	movs	r2, #1
 8000388:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SystemInit+0xc4>)
 800038c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000390:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00
 80003a0:	58024400 	.word	0x58024400
 80003a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80003a8:	580000c0 	.word	0x580000c0
 80003ac:	5c001000 	.word	0x5c001000
 80003b0:	ffff0000 	.word	0xffff0000
 80003b4:	51008108 	.word	0x51008108

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80003be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003c2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80003c4:	bf00      	nop
 80003c6:	4b21      	ldr	r3, [pc, #132]	; (800044c <main+0x94>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d004      	beq.n	80003dc <main+0x24>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	1e5a      	subs	r2, r3, #1
 80003d6:	607a      	str	r2, [r7, #4]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	dcf4      	bgt.n	80003c6 <main+0xe>
  if ( timeout < 0 )
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	da01      	bge.n	80003e6 <main+0x2e>
  {
  Error_Handler();
 80003e2:	f000 f96d 	bl	80006c0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e6:	f000 fa11 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ea:	f000 f831 	bl	8000450 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <main+0x94>)
 80003f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f4:	4a15      	ldr	r2, [pc, #84]	; (800044c <main+0x94>)
 80003f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <main+0x94>)
 8000400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800040c:	2000      	movs	r0, #0
 800040e:	f000 fd7b 	bl	8000f08 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000412:	2100      	movs	r1, #0
 8000414:	2000      	movs	r0, #0
 8000416:	f000 fd91 	bl	8000f3c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800041a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000420:	bf00      	nop
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <main+0x94>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800042a:	2b00      	cmp	r3, #0
 800042c:	d104      	bne.n	8000438 <main+0x80>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	607a      	str	r2, [r7, #4]
 8000434:	2b00      	cmp	r3, #0
 8000436:	dcf4      	bgt.n	8000422 <main+0x6a>
if ( timeout < 0 )
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	da01      	bge.n	8000442 <main+0x8a>
{
Error_Handler();
 800043e:	f000 f93f 	bl	80006c0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000442:	f000 f905 	bl	8000650 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000446:	f004 fd17 	bl	8004e78 <MX_USB_DEVICE_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800044a:	e7fe      	b.n	800044a <main+0x92>
 800044c:	58024400 	.word	0x58024400

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b0cc      	sub	sp, #304	; 0x130
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800045a:	224c      	movs	r2, #76	; 0x4c
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f005 f8be 	bl	80055e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000468:	2220      	movs	r2, #32
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f005 f8b7 	bl	80055e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	4618      	mov	r0, r3
 8000478:	23bc      	movs	r3, #188	; 0xbc
 800047a:	461a      	mov	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f005 f8af 	bl	80055e0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000482:	2004      	movs	r0, #4
 8000484:	f001 f904 	bl	8001690 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	4b6c      	ldr	r3, [pc, #432]	; (8000640 <SystemClock_Config+0x1f0>)
 8000490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000492:	4a6b      	ldr	r2, [pc, #428]	; (8000640 <SystemClock_Config+0x1f0>)
 8000494:	f023 0301 	bic.w	r3, r3, #1
 8000498:	62d3      	str	r3, [r2, #44]	; 0x2c
 800049a:	4b69      	ldr	r3, [pc, #420]	; (8000640 <SystemClock_Config+0x1f0>)
 800049c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800049e:	f003 0201 	and.w	r2, r3, #1
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	4b67      	ldr	r3, [pc, #412]	; (8000644 <SystemClock_Config+0x1f4>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004ae:	4a65      	ldr	r2, [pc, #404]	; (8000644 <SystemClock_Config+0x1f4>)
 80004b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b63      	ldr	r3, [pc, #396]	; (8000644 <SystemClock_Config+0x1f4>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004c6:	bf00      	nop
 80004c8:	4b5e      	ldr	r3, [pc, #376]	; (8000644 <SystemClock_Config+0x1f4>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d4:	d1f8      	bne.n	80004c8 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80004d6:	4b5c      	ldr	r3, [pc, #368]	; (8000648 <SystemClock_Config+0x1f8>)
 80004d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004da:	f023 0303 	bic.w	r3, r3, #3
 80004de:	4a5a      	ldr	r2, [pc, #360]	; (8000648 <SystemClock_Config+0x1f8>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004e6:	2303      	movs	r3, #3
 80004e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004f4:	2301      	movs	r3, #1
 80004f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fa:	2340      	movs	r3, #64	; 0x40
 80004fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000506:	2302      	movs	r3, #2
 8000508:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 23;
 800050c:	2317      	movs	r3, #23
 800050e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 177;
 8000512:	23b1      	movs	r3, #177	; 0xb1
 8000514:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000518:	2302      	movs	r3, #2
 800051a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800051e:	2304      	movs	r3, #4
 8000520:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000524:	2304      	movs	r3, #4
 8000526:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800052a:	2300      	movs	r3, #0
 800052c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000530:	2300      	movs	r3, #0
 8000532:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000540:	4618      	mov	r0, r3
 8000542:	f001 f90f 	bl	8001764 <HAL_RCC_OscConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x100>
  {
    Error_Handler();
 800054c:	f000 f8b8 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	233f      	movs	r3, #63	; 0x3f
 8000552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000580:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fcc4 	bl	8001f14 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x146>
  {
    Error_Handler();
 8000592:	f000 f895 	bl	80006c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART3
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	4a2c      	ldr	r2, [pc, #176]	; (800064c <SystemClock_Config+0x1fc>)
 800059c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_QSPI|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	2220      	movs	r2, #32
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 129;
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	2281      	movs	r2, #129	; 0x81
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	2202      	movs	r2, #2
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	2202      	movs	r2, #2
 80005bc:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80005be:	f107 0308 	add.w	r3, r7, #8
 80005c2:	2202      	movs	r2, #2
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80005ce:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2200      	movs	r2, #0
 80005de:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2200      	movs	r2, #0
 80005e6:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2200      	movs	r2, #0
 80005ee:	649a      	str	r2, [r3, #72]	; 0x48
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2200      	movs	r2, #0
 80005f6:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	659a      	str	r2, [r3, #88]	; 0x58
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000608:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2200      	movs	r2, #0
 8000610:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800061a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061e:	f107 0308 	add.w	r3, r7, #8
 8000622:	4618      	mov	r0, r3
 8000624:	f001 ffa8 	bl	8002578 <HAL_RCCEx_PeriphCLKConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x1e2>
  {
    Error_Handler();
 800062e:	f000 f847 	bl	80006c0 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000632:	f001 f887 	bl	8001744 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000636:	bf00      	nop
 8000638:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	58000400 	.word	0x58000400
 8000644:	58024800 	.word	0x58024800
 8000648:	58024400 	.word	0x58024400
 800064c:	23058202 	.word	0x23058202

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_GPIO_Init+0x6c>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065c:	4a17      	ldr	r2, [pc, #92]	; (80006bc <MX_GPIO_Init+0x6c>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_GPIO_Init+0x6c>)
 8000668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_GPIO_Init+0x6c>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067a:	4a10      	ldr	r2, [pc, #64]	; (80006bc <MX_GPIO_Init+0x6c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_GPIO_Init+0x6c>)
 8000686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <MX_GPIO_Init+0x6c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	4a08      	ldr	r2, [pc, #32]	; (80006bc <MX_GPIO_Init+0x6c>)
 800069a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_GPIO_Init+0x6c>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	58024400 	.word	0x58024400

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_MspInit+0x30>)
 80006d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x30>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x30>)
 80006e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006ec:	f003 0302 	and.w	r3, r3, #2
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	58024400 	.word	0x58024400

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 f8e0 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <_sbrk+0x50>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <_sbrk+0x16>
		heap_end = &end;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <_sbrk+0x50>)
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <_sbrk+0x54>)
 8000774:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <_sbrk+0x50>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <_sbrk+0x50>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	466a      	mov	r2, sp
 8000786:	4293      	cmp	r3, r2
 8000788:	d907      	bls.n	800079a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800078a:	f004 feef 	bl	800556c <__errno>
 800078e:	4602      	mov	r2, r0
 8000790:	230c      	movs	r3, #12
 8000792:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000794:	f04f 33ff 	mov.w	r3, #4294967295
 8000798:	e006      	b.n	80007a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <_sbrk+0x50>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <_sbrk+0x50>)
 80007a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000200 	.word	0x20000200
 80007b4:	20001ae0 	.word	0x20001ae0

080007b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007be:	e003      	b.n	80007c8 <LoopCopyDataInit>

080007c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80007c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007c6:	3104      	adds	r1, #4

080007c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007c8:	480b      	ldr	r0, [pc, #44]	; (80007f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007d0:	d3f6      	bcc.n	80007c0 <CopyDataInit>
  ldr  r2, =_sbss
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80007d4:	e002      	b.n	80007dc <LoopFillZerobss>

080007d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007d8:	f842 3b04 	str.w	r3, [r2], #4

080007dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80007de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007e0:	d3f9      	bcc.n	80007d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007e2:	f7ff fd79 	bl	80002d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007e6:	f004 fec7 	bl	8005578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ea:	f7ff fde5 	bl	80003b8 <main>
  bx  lr    
 80007ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80007f4:	080057dc 	.word	0x080057dc
  ldr  r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007fc:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000800:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000804:	20001ae0 	.word	0x20001ae0

08000808 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC3_IRQHandler>
	...

0800080c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f983 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000816:	f001 fd21 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800081a:	4601      	mov	r1, r0
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_Init+0x60>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <HAL_Init+0x64>)
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	f003 031f 	and.w	r3, r3, #31
 800082e:	fa21 f303 	lsr.w	r3, r1, r3
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_Init+0x68>)
 8000834:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_Init+0x68>)
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_Init+0x60>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 030f 	and.w	r3, r3, #15
 8000842:	490b      	ldr	r1, [pc, #44]	; (8000870 <HAL_Init+0x64>)
 8000844:	5ccb      	ldrb	r3, [r1, r3]
 8000846:	f003 031f 	and.w	r3, r3, #31
 800084a:	fa22 f303 	lsr.w	r3, r2, r3
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_Init+0x6c>)
 8000850:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f812 	bl	800087c <HAL_InitTick>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	e002      	b.n	8000868 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000862:	f7ff ff35 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	bd80      	pop	{r7, pc}
 800086c:	58024400 	.word	0x58024400
 8000870:	080057c4 	.word	0x080057c4
 8000874:	20000000 	.word	0x20000000
 8000878:	20000004 	.word	0x20000004

0800087c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <HAL_InitTick+0x94>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	e03a      	b.n	8000906 <HAL_InitTick+0x8a>
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8000890:	f000 f976 	bl	8000b80 <HAL_GetCurrentCPUID>
 8000894:	4603      	mov	r3, r0
 8000896:	2b03      	cmp	r3, #3
 8000898:	d112      	bne.n	80008c0 <HAL_InitTick+0x44>
  {
    /* Cortex-M7 detected */
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800089a:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <HAL_InitTick+0x98>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <HAL_InitTick+0x94>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	4619      	mov	r1, r3
 80008a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f958 	bl	8000b66 <HAL_SYSTICK_Config>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d015      	beq.n	80008e8 <HAL_InitTick+0x6c>
    {
      return HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
 80008be:	e022      	b.n	8000906 <HAL_InitTick+0x8a>
  }
  else
  {
    /* Cortex-M4 detected */
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008c0:	f001 fe3e 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 80008c4:	4602      	mov	r2, r0
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x94>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4619      	mov	r1, r3
 80008cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f944 	bl	8000b66 <HAL_SYSTICK_Config>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_InitTick+0x6c>
    {
      return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e00e      	b.n	8000906 <HAL_InitTick+0x8a>
    return HAL_ERROR;
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b0f      	cmp	r3, #15
 80008ec:	d80a      	bhi.n	8000904 <HAL_InitTick+0x88>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ee:	2200      	movs	r2, #0
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	f04f 30ff 	mov.w	r0, #4294967295
 80008f6:	f000 f91c 	bl	8000b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fa:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_InitTick+0x9c>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
 8000902:	e000      	b.n	8000906 <HAL_InitTick+0x8a>
    return HAL_ERROR;
 8000904:	2301      	movs	r3, #1
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000000c 	.word	0x2000000c
 8000914:	20000000 	.word	0x20000000
 8000918:	20000008 	.word	0x20000008

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	2000000c 	.word	0x2000000c
 8000940:	2000020c 	.word	0x2000020c

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	2000020c 	.word	0x2000020c

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff ffee 	bl	8000944 <HAL_GetTick>
 8000968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_Delay+0x40>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000982:	bf00      	nop
 8000984:	f7ff ffde 	bl	8000944 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000000c 	.word	0x2000000c

080009a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <HAL_GetREVID+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	0c1b      	lsrs	r3, r3, #16
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	5c001000 	.word	0x5c001000

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <__NVIC_SetPriorityGrouping+0x40>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	4313      	orrs	r3, r2
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <__NVIC_SetPriorityGrouping+0x40>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00
 80009fc:	05fa0000 	.word	0x05fa0000

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f7ff ff8e 	bl	8000a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff47 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b40:	f7ff ff5e 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	6978      	ldr	r0, [r7, #20]
 8000b4c:	f7ff ff90 	bl	8000a70 <NVIC_EncodePriority>
 8000b50:	4602      	mov	r2, r0
 8000b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff5f 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ffb2 	bl	8000ad8 <SysTick_Config>
 8000b74:	4603      	mov	r3, r0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <HAL_GetCurrentCPUID+0x24>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	091b      	lsrs	r3, r3, #4
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	d101      	bne.n	8000b96 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e000      	b.n	8000b98 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8000b96:	2301      	movs	r3, #1
  }
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bb6:	4b89      	ldr	r3, [pc, #548]	; (8000ddc <HAL_GPIO_Init+0x234>)
 8000bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bba:	e194      	b.n	8000ee6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 8186 	beq.w	8000ee0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x3c>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b12      	cmp	r3, #18
 8000be2:	d123      	bne.n	8000c2c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	08da      	lsrs	r2, r3, #3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3208      	adds	r2, #8
 8000bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	f003 0307 	and.w	r3, r3, #7
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	220f      	movs	r2, #15
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	691a      	ldr	r2, [r3, #16]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	08da      	lsrs	r2, r3, #3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3208      	adds	r2, #8
 8000c26:	69b9      	ldr	r1, [r7, #24]
 8000c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f003 0203 	and.w	r2, r3, #3
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d00b      	beq.n	8000c80 <HAL_GPIO_Init+0xd8>
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d007      	beq.n	8000c80 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c74:	2b11      	cmp	r3, #17
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b12      	cmp	r3, #18
 8000c7e:	d130      	bne.n	8000ce2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	f003 0201 	and.w	r2, r3, #1
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f000 80e0 	beq.w	8000ee0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <HAL_GPIO_Init+0x238>)
 8000d22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d26:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <HAL_GPIO_Init+0x238>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_GPIO_Init+0x238>)
 8000d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3e:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <HAL_GPIO_Init+0x23c>)
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_GPIO_Init+0x240>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d052      	beq.n	8000e10 <HAL_GPIO_Init+0x268>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_GPIO_Init+0x244>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d031      	beq.n	8000dd6 <HAL_GPIO_Init+0x22e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a1e      	ldr	r2, [pc, #120]	; (8000df0 <HAL_GPIO_Init+0x248>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d02b      	beq.n	8000dd2 <HAL_GPIO_Init+0x22a>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <HAL_GPIO_Init+0x24c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d025      	beq.n	8000dce <HAL_GPIO_Init+0x226>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <HAL_GPIO_Init+0x250>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d01f      	beq.n	8000dca <HAL_GPIO_Init+0x222>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_GPIO_Init+0x254>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d019      	beq.n	8000dc6 <HAL_GPIO_Init+0x21e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <HAL_GPIO_Init+0x258>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d013      	beq.n	8000dc2 <HAL_GPIO_Init+0x21a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_GPIO_Init+0x25c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d00d      	beq.n	8000dbe <HAL_GPIO_Init+0x216>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_GPIO_Init+0x260>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d007      	beq.n	8000dba <HAL_GPIO_Init+0x212>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_GPIO_Init+0x264>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_GPIO_Init+0x20e>
 8000db2:	2309      	movs	r3, #9
 8000db4:	e02d      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000db6:	230a      	movs	r3, #10
 8000db8:	e02b      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dba:	2308      	movs	r3, #8
 8000dbc:	e029      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	e027      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	e025      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	e023      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dca:	2304      	movs	r3, #4
 8000dcc:	e021      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e01f      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e01d      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e01b      	b.n	8000e12 <HAL_GPIO_Init+0x26a>
 8000dda:	bf00      	nop
 8000ddc:	58000080 	.word	0x58000080
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58000400 	.word	0x58000400
 8000de8:	58020000 	.word	0x58020000
 8000dec:	58020400 	.word	0x58020400
 8000df0:	58020800 	.word	0x58020800
 8000df4:	58020c00 	.word	0x58020c00
 8000df8:	58021000 	.word	0x58021000
 8000dfc:	58021400 	.word	0x58021400
 8000e00:	58021800 	.word	0x58021800
 8000e04:	58021c00 	.word	0x58021c00
 8000e08:	58022000 	.word	0x58022000
 8000e0c:	58022400 	.word	0x58022400
 8000e10:	2300      	movs	r3, #0
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	f002 0203 	and.w	r2, r2, #3
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	4093      	lsls	r3, r2
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e22:	4938      	ldr	r1, [pc, #224]	; (8000f04 <HAL_GPIO_Init+0x35c>)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f47f ae63 	bne.w	8000bbc <HAL_GPIO_Init+0x14>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	58000400 	.word	0x58000400

08000f08 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <HAL_HSEM_FastTake+0x2c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3320      	adds	r3, #32
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_HSEM_FastTake+0x30>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d101      	bne.n	8000f24 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e000      	b.n	8000f26 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	58026400 	.word	0x58026400
 8000f38:	80000300 	.word	0x80000300

08000f3c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000f46:	4906      	ldr	r1, [pc, #24]	; (8000f60 <HAL_HSEM_Release+0x24>)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	58026400 	.word	0x58026400

08000f64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f66:	b08f      	sub	sp, #60	; 0x3c
 8000f68:	af0a      	add	r7, sp, #40	; 0x28
 8000f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e116      	b.n	80011a4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d106      	bne.n	8000f96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f004 f93f 	bl	8005214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2203      	movs	r2, #3
 8000f9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fbb0 	bl	800371a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	687e      	ldr	r6, [r7, #4]
 8000fc2:	466d      	mov	r5, sp
 8000fc4:	f106 0410 	add.w	r4, r6, #16
 8000fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fd8:	1d33      	adds	r3, r6, #4
 8000fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fdc:	6838      	ldr	r0, [r7, #0]
 8000fde:	f002 fb29 	bl	8003634 <USB_CoreInit>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2202      	movs	r2, #2
 8000fec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0d7      	b.n	80011a4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f002 fb9e 	bl	800373c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	e04a      	b.n	800109c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	1a9b      	subs	r3, r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	440b      	add	r3, r1
 8001014:	333d      	adds	r3, #61	; 0x3d
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	333c      	adds	r3, #60	; 0x3c
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	b298      	uxth	r0, r3
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	1a9b      	subs	r3, r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3342      	adds	r3, #66	; 0x42
 8001042:	4602      	mov	r2, r0
 8001044:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	333f      	adds	r3, #63	; 0x3f
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	3344      	adds	r3, #68	; 0x44
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	3348      	adds	r3, #72	; 0x48
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	3350      	adds	r3, #80	; 0x50
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	3301      	adds	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3af      	bcc.n	8001006 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e044      	b.n	8001136 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	1a9b      	subs	r3, r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	440b      	add	r3, r1
 80010d0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010d8:	7bfa      	ldrb	r2, [r7, #15]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	1a9b      	subs	r3, r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	1a9b      	subs	r3, r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	1a9b      	subs	r3, r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	3301      	adds	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	429a      	cmp	r2, r3
 800113e:	d3b5      	bcc.n	80010ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	687e      	ldr	r6, [r7, #4]
 8001148:	466d      	mov	r5, sp
 800114a:	f106 0410 	add.w	r4, r6, #16
 800114e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001156:	e894 0003 	ldmia.w	r4, {r0, r1}
 800115a:	e885 0003 	stmia.w	r5, {r0, r1}
 800115e:	1d33      	adds	r3, r6, #4
 8001160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001162:	6838      	ldr	r0, [r7, #0]
 8001164:	f002 fb14 	bl	8003790 <USB_DevInit>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2202      	movs	r2, #2
 8001172:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e014      	b.n	80011a4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	2b01      	cmp	r3, #1
 8001190:	d102      	bne.n	8001198 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 fa58 	bl	8001648 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f003 fa22 	bl	80045e6 <USB_DevDisconnect>

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_PCD_Start+0x1c>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e020      	b.n	800120a <HAL_PCD_Start+0x5e>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d109      	bne.n	80011ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d005      	beq.n	80011ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 f9e0 	bl	80045b6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fa7c 	bl	80036f8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	4608      	mov	r0, r1
 800121c:	4611      	mov	r1, r2
 800121e:	461a      	mov	r2, r3
 8001220:	4603      	mov	r3, r0
 8001222:	70fb      	strb	r3, [r7, #3]
 8001224:	460b      	mov	r3, r1
 8001226:	803b      	strh	r3, [r7, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001234:	2b00      	cmp	r3, #0
 8001236:	da0f      	bge.n	8001258 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	f003 020f 	and.w	r2, r3, #15
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	3338      	adds	r3, #56	; 0x38
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	3304      	adds	r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2201      	movs	r2, #1
 8001254:	705a      	strb	r2, [r3, #1]
 8001256:	e00f      	b.n	8001278 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	f003 020f 	and.w	r2, r3, #15
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	1a9b      	subs	r3, r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	3304      	adds	r3, #4
 8001270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	b2da      	uxtb	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001284:	883a      	ldrh	r2, [r7, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	78ba      	ldrb	r2, [r7, #2]
 800128e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	785b      	ldrb	r3, [r3, #1]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b29a      	uxth	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80012a2:	78bb      	ldrb	r3, [r7, #2]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d102      	bne.n	80012ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_PCD_EP_Open+0xaa>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e00e      	b.n	80012da <HAL_PCD_EP_Open+0xc8>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68f9      	ldr	r1, [r7, #12]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 fc20 	bl	8003b10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80012d8:	7afb      	ldrb	r3, [r7, #11]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da0f      	bge.n	8001316 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	f003 020f 	and.w	r2, r3, #15
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	3338      	adds	r3, #56	; 0x38
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	3304      	adds	r3, #4
 800130c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2201      	movs	r2, #1
 8001312:	705a      	strb	r2, [r3, #1]
 8001314:	e00f      	b.n	8001336 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f003 020f 	and.w	r2, r3, #15
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	3304      	adds	r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2200      	movs	r2, #0
 8001334:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	b2da      	uxtb	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_PCD_EP_Close+0x6e>
 800134c:	2302      	movs	r3, #2
 800134e:	e00e      	b.n	800136e <HAL_PCD_EP_Close+0x8c>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68f9      	ldr	r1, [r7, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fc5e 	bl	8003c20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b086      	sub	sp, #24
 800137a:	af00      	add	r7, sp, #0
 800137c:	60f8      	str	r0, [r7, #12]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	460b      	mov	r3, r1
 8001384:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	f003 020f 	and.w	r2, r3, #15
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	1a9b      	subs	r3, r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	3304      	adds	r3, #4
 800139e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2200      	movs	r2, #0
 80013b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d102      	bne.n	80013d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013d2:	7afb      	ldrb	r3, [r7, #11]
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d109      	bne.n	80013f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	6979      	ldr	r1, [r7, #20]
 80013ea:	f002 fee9 	bl	80041c0 <USB_EP0StartXfer>
 80013ee:	e008      	b.n	8001402 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	6979      	ldr	r1, [r7, #20]
 80013fe:	f002 fc93 	bl	8003d28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	f003 020f 	and.w	r2, r3, #15
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	1a9b      	subs	r3, r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	460b      	mov	r3, r1
 800144a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800144c:	7afb      	ldrb	r3, [r7, #11]
 800144e:	f003 020f 	and.w	r2, r3, #15
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	3338      	adds	r3, #56	; 0x38
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	3304      	adds	r3, #4
 8001462:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2200      	movs	r2, #0
 8001474:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2201      	movs	r2, #1
 800147a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800147c:	7afb      	ldrb	r3, [r7, #11]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	b2da      	uxtb	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001496:	7afb      	ldrb	r3, [r7, #11]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	2b00      	cmp	r3, #0
 800149e:	d109      	bne.n	80014b4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	461a      	mov	r2, r3
 80014ac:	6979      	ldr	r1, [r7, #20]
 80014ae:	f002 fe87 	bl	80041c0 <USB_EP0StartXfer>
 80014b2:	e008      	b.n	80014c6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	6979      	ldr	r1, [r7, #20]
 80014c2:	f002 fc31 	bl	8003d28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	f003 020f 	and.w	r2, r3, #15
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d901      	bls.n	80014ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e050      	b.n	8001590 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	da0f      	bge.n	8001516 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	f003 020f 	and.w	r2, r3, #15
 80014fc:	4613      	mov	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	1a9b      	subs	r3, r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	3338      	adds	r3, #56	; 0x38
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	3304      	adds	r3, #4
 800150c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2201      	movs	r2, #1
 8001512:	705a      	strb	r2, [r3, #1]
 8001514:	e00d      	b.n	8001532 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	3304      	adds	r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2201      	movs	r2, #1
 8001536:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	b2da      	uxtb	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_PCD_EP_SetStall+0x82>
 800154e:	2302      	movs	r3, #2
 8001550:	e01e      	b.n	8001590 <HAL_PCD_EP_SetStall+0xc0>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68f9      	ldr	r1, [r7, #12]
 8001560:	4618      	mov	r0, r3
 8001562:	f002 ffba 	bl	80044da <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	f003 030f 	and.w	r3, r3, #15
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10a      	bne.n	8001586 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	b2d9      	uxtb	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001580:	461a      	mov	r2, r3
 8001582:	f003 f849 	bl	8004618 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	70fb      	strb	r3, [r7, #3]
 80015a4:	4613      	mov	r3, r2
 80015a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d107      	bne.n	80015c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80015b6:	883b      	ldrh	r3, [r7, #0]
 80015b8:	0419      	lsls	r1, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
 80015c4:	e028      	b.n	8001618 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4413      	add	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e00d      	b.n	80015f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	3340      	adds	r3, #64	; 0x40
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	0c1b      	lsrs	r3, r3, #16
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	4413      	add	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	3301      	adds	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d3ec      	bcc.n	80015da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001600:	883b      	ldrh	r3, [r7, #0]
 8001602:	0418      	lsls	r0, r3, #16
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6819      	ldr	r1, [r3, #0]
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	3b01      	subs	r3, #1
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4302      	orrs	r2, r0
 8001610:	3340      	adds	r3, #64	; 0x40
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_PCDEx_ActivateLPM+0x44>)
 8001678:	4313      	orrs	r3, r2
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	10000003 	.word	0x10000003

08001690 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	d00a      	beq.n	80016ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e040      	b.n	8001738 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e03e      	b.n	8001738 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016ba:	4b21      	ldr	r3, [pc, #132]	; (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80016c2:	491f      	ldr	r1, [pc, #124]	; (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016ca:	f7ff f93b 	bl	8000944 <HAL_GetTick>
 80016ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016d0:	e009      	b.n	80016e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016d2:	f7ff f937 	bl	8000944 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e0:	d901      	bls.n	80016e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e028      	b.n	8001738 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016f2:	d1ee      	bne.n	80016d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b1e      	cmp	r3, #30
 80016f8:	d008      	beq.n	800170c <HAL_PWREx_ConfigSupply+0x7c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b2e      	cmp	r3, #46	; 0x2e
 80016fe:	d005      	beq.n	800170c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b1d      	cmp	r3, #29
 8001704:	d002      	beq.n	800170c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b2d      	cmp	r3, #45	; 0x2d
 800170a:	d114      	bne.n	8001736 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800170c:	f7ff f91a 	bl	8000944 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001712:	e009      	b.n	8001728 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001714:	f7ff f916 	bl	8000944 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001722:	d901      	bls.n	8001728 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e007      	b.n	8001738 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_PWREx_ConfigSupply+0xb0>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d1ee      	bne.n	8001714 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	58024800 	.word	0x58024800

08001744 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800174e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	58024800 	.word	0x58024800

08001764 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e3c4      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8087 	beq.w	8001892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001784:	4ba2      	ldr	r3, [pc, #648]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800178e:	4ba0      	ldr	r3, [pc, #640]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001796:	2b10      	cmp	r3, #16
 8001798:	d007      	beq.n	80017aa <HAL_RCC_OscConfig+0x46>
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	2b18      	cmp	r3, #24
 800179e:	d110      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
 80017a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d10b      	bne.n	80017c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017aa:	4b99      	ldr	r3, [pc, #612]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d06c      	beq.n	8001890 <HAL_RCC_OscConfig+0x12c>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d168      	bne.n	8001890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e39e      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ca:	d106      	bne.n	80017da <HAL_RCC_OscConfig+0x76>
 80017cc:	4b90      	ldr	r3, [pc, #576]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a8f      	ldr	r2, [pc, #572]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e02e      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x98>
 80017e2:	4b8b      	ldr	r3, [pc, #556]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a8a      	ldr	r2, [pc, #552]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a87      	ldr	r2, [pc, #540]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0xbc>
 8001806:	4b82      	ldr	r3, [pc, #520]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a81      	ldr	r2, [pc, #516]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7e      	ldr	r2, [pc, #504]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xd4>
 8001820:	4b7b      	ldr	r3, [pc, #492]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a7a      	ldr	r2, [pc, #488]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b78      	ldr	r3, [pc, #480]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a77      	ldr	r2, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff f880 	bl	8000944 <HAL_GetTick>
 8001844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff f87c 	bl	8000944 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e352      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800185a:	4b6d      	ldr	r3, [pc, #436]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xe4>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff f86c 	bl	8000944 <HAL_GetTick>
 800186c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff f868 	bl	8000944 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e33e      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x10c>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8092 	beq.w	80019c4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a0:	4b5b      	ldr	r3, [pc, #364]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018aa:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_RCC_OscConfig+0x162>
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	2b18      	cmp	r3, #24
 80018ba:	d12d      	bne.n	8001918 <HAL_RCC_OscConfig+0x1b4>
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d128      	bne.n	8001918 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c6:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x17a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e310      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	f7ff f85f 	bl	80009a0 <HAL_GetREVID>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d80a      	bhi.n	8001902 <HAL_RCC_OscConfig+0x19e>
 80018ec:	4b48      	ldr	r3, [pc, #288]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	031b      	lsls	r3, r3, #12
 80018fa:	4945      	ldr	r1, [pc, #276]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001900:	e060      	b.n	80019c4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	061b      	lsls	r3, r3, #24
 8001910:	493f      	ldr	r1, [pc, #252]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001916:	e055      	b.n	80019c4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d038      	beq.n	8001992 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001920:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 0219 	bic.w	r2, r3, #25
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4938      	ldr	r1, [pc, #224]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff f807 	bl	8000944 <HAL_GetTick>
 8001936:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff f803 	bl	8000944 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e2d9      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001958:	f7ff f822 	bl	80009a0 <HAL_GetREVID>
 800195c:	4602      	mov	r2, r0
 800195e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001962:	429a      	cmp	r2, r3
 8001964:	d80a      	bhi.n	800197c <HAL_RCC_OscConfig+0x218>
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	031b      	lsls	r3, r3, #12
 8001974:	4926      	ldr	r1, [pc, #152]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
 800197a:	e023      	b.n	80019c4 <HAL_RCC_OscConfig+0x260>
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	4921      	ldr	r1, [pc, #132]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
 8001990:	e018      	b.n	80019c4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7fe ffd1 	bl	8000944 <HAL_GetTick>
 80019a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a6:	f7fe ffcd 	bl	8000944 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e2a3      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f0      	bne.n	80019a6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 8091 	beq.w	8001af4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d007      	beq.n	80019f8 <HAL_RCC_OscConfig+0x294>
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b18      	cmp	r3, #24
 80019ec:	d12f      	bne.n	8001a4e <HAL_RCC_OscConfig+0x2ea>
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d12a      	bne.n	8001a4e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_OscConfig+0x2ac>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2b0>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b80      	cmp	r3, #128	; 0x80
 8001a0a:	d003      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e277      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
 8001a10:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a14:	f7fe ffc4 	bl	80009a0 <HAL_GetREVID>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d80a      	bhi.n	8001a38 <HAL_RCC_OscConfig+0x2d4>
 8001a22:	4ba2      	ldr	r3, [pc, #648]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	069b      	lsls	r3, r3, #26
 8001a30:	499e      	ldr	r1, [pc, #632]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a36:	e05d      	b.n	8001af4 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a38:	4b9c      	ldr	r3, [pc, #624]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	4999      	ldr	r1, [pc, #612]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a4c:	e052      	b.n	8001af4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d035      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a56:	4b95      	ldr	r3, [pc, #596]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a94      	ldr	r2, [pc, #592]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7fe ff6f 	bl	8000944 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a6a:	f7fe ff6b 	bl	8000944 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e241      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a7c:	4b8b      	ldr	r3, [pc, #556]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a88:	f7fe ff8a 	bl	80009a0 <HAL_GetREVID>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f241 0303 	movw	r3, #4099	; 0x1003
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d80a      	bhi.n	8001aac <HAL_RCC_OscConfig+0x348>
 8001a96:	4b85      	ldr	r3, [pc, #532]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	069b      	lsls	r3, r3, #26
 8001aa4:	4981      	ldr	r1, [pc, #516]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
 8001aaa:	e023      	b.n	8001af4 <HAL_RCC_OscConfig+0x390>
 8001aac:	4b7f      	ldr	r3, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	061b      	lsls	r3, r3, #24
 8001aba:	497c      	ldr	r1, [pc, #496]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
 8001ac0:	e018      	b.n	8001af4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ac2:	4b7a      	ldr	r3, [pc, #488]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a79      	ldr	r2, [pc, #484]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7fe ff39 	bl	8000944 <HAL_GetTick>
 8001ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ad6:	f7fe ff35 	bl	8000944 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e20b      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ae8:	4b70      	ldr	r3, [pc, #448]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d036      	beq.n	8001b6e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d019      	beq.n	8001b3c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0c:	4a67      	ldr	r2, [pc, #412]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b14:	f7fe ff16 	bl	8000944 <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7fe ff12 	bl	8000944 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1e8      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x3b8>
 8001b3a:	e018      	b.n	8001b6e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3c:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b40:	4a5a      	ldr	r2, [pc, #360]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7fe fefc 	bl	8000944 <HAL_GetTick>
 8001b4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b50:	f7fe fef8 	bl	8000944 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1ce      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b62:	4b52      	ldr	r3, [pc, #328]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d036      	beq.n	8001be8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d019      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b82:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a49      	ldr	r2, [pc, #292]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b8e:	f7fe fed9 	bl	8000944 <HAL_GetTick>
 8001b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b96:	f7fe fed5 	bl	8000944 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1ab      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ba8:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x432>
 8001bb4:	e018      	b.n	8001be8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a3c      	ldr	r2, [pc, #240]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bc2:	f7fe febf 	bl	8000944 <HAL_GetTick>
 8001bc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bca:	f7fe febb 	bl	8000944 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e191      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bdc:	4b33      	ldr	r3, [pc, #204]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8086 	beq.w	8001d02 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_RCC_OscConfig+0x54c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2d      	ldr	r2, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x54c>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c02:	f7fe fe9f 	bl	8000944 <HAL_GetTick>
 8001c06:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c0a:	f7fe fe9b 	bl	8000944 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b64      	cmp	r3, #100	; 0x64
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e171      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_RCC_OscConfig+0x54c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x4da>
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	4a1d      	ldr	r2, [pc, #116]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3c:	e02d      	b.n	8001c9a <HAL_RCC_OscConfig+0x536>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4fc>
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4a:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	6713      	str	r3, [r2, #112]	; 0x70
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	4a15      	ldr	r2, [pc, #84]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c58:	f023 0304 	bic.w	r3, r3, #4
 8001c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5e:	e01c      	b.n	8001c9a <HAL_RCC_OscConfig+0x536>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d10c      	bne.n	8001c82 <HAL_RCC_OscConfig+0x51e>
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6713      	str	r3, [r2, #112]	; 0x70
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c80:	e00b      	b.n	8001c9a <HAL_RCC_OscConfig+0x536>
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_RCC_OscConfig+0x548>)
 8001c94:	f023 0304 	bic.w	r3, r3, #4
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d01a      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca2:	f7fe fe4f 	bl	8000944 <HAL_GetTick>
 8001ca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ca8:	e00f      	b.n	8001cca <HAL_RCC_OscConfig+0x566>
 8001caa:	bf00      	nop
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7fe fe46 	bl	8000944 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e11a      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cca:	4b8f      	ldr	r3, [pc, #572]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x550>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7fe fe34 	bl	8000944 <HAL_GetTick>
 8001cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7fe fe30 	bl	8000944 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e104      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cf6:	4b84      	ldr	r3, [pc, #528]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ee      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80f9 	beq.w	8001efe <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d0c:	4b7e      	ldr	r3, [pc, #504]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d14:	2b18      	cmp	r3, #24
 8001d16:	f000 80b4 	beq.w	8001e82 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	f040 8095 	bne.w	8001e4e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b78      	ldr	r3, [pc, #480]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a77      	ldr	r2, [pc, #476]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7fe fe08 	bl	8000944 <HAL_GetTick>
 8001d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d38:	f7fe fe04 	bl	8000944 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0da      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d56:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d5a:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_RCC_OscConfig+0x7a8>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	4967      	ldr	r1, [pc, #412]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	628b      	str	r3, [r1, #40]	; 0x28
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	3b01      	subs	r3, #1
 8001d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	025b      	lsls	r3, r3, #9
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	041b      	lsls	r3, r3, #16
 8001d8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	061b      	lsls	r3, r3, #24
 8001d9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001da0:	4959      	ldr	r1, [pc, #356]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001da6:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	4a57      	ldr	r2, [pc, #348]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001db2:	4b55      	ldr	r3, [pc, #340]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db6:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <HAL_RCC_OscConfig+0x7ac>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dbe:	00d2      	lsls	r2, r2, #3
 8001dc0:	4951      	ldr	r1, [pc, #324]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dc6:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f023 020c 	bic.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	494d      	ldr	r1, [pc, #308]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	f023 0202 	bic.w	r2, r3, #2
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	4948      	ldr	r1, [pc, #288]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	4a46      	ldr	r2, [pc, #280]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	4a43      	ldr	r2, [pc, #268]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e02:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	4a3d      	ldr	r2, [pc, #244]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7fe fd8d 	bl	8000944 <HAL_GetTick>
 8001e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7fe fd89 	bl	8000944 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e05f      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e40:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x6ca>
 8001e4c:	e057      	b.n	8001efe <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a2d      	ldr	r2, [pc, #180]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fd73 	bl	8000944 <HAL_GetTick>
 8001e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe fd6f 	bl	8000944 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e045      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x6fe>
 8001e80:	e03d      	b.n	8001efe <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <HAL_RCC_OscConfig+0x7a4>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d031      	beq.n	8001efa <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d12a      	bne.n	8001efa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d122      	bne.n	8001efa <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d11a      	bne.n	8001efa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	0a5b      	lsrs	r3, r3, #9
 8001ec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d111      	bne.n	8001efa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d108      	bne.n	8001efa <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	0e1b      	lsrs	r3, r3, #24
 8001eec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3730      	adds	r7, #48	; 0x30
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	58024400 	.word	0x58024400
 8001f0c:	fffffc0c 	.word	0xfffffc0c
 8001f10:	ffff0007 	.word	0xffff0007

08001f14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e18d      	b.n	8002244 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f28:	4b8a      	ldr	r3, [pc, #552]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d910      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b87      	ldr	r3, [pc, #540]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 020f 	bic.w	r2, r3, #15
 8001f3e:	4985      	ldr	r1, [pc, #532]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b83      	ldr	r3, [pc, #524]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e175      	b.n	8002244 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d010      	beq.n	8001f86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	4b7b      	ldr	r3, [pc, #492]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d908      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f74:	4b78      	ldr	r3, [pc, #480]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	4975      	ldr	r1, [pc, #468]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d010      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	4b70      	ldr	r3, [pc, #448]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d908      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	496a      	ldr	r1, [pc, #424]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699a      	ldr	r2, [r3, #24]
 8001fc4:	4b64      	ldr	r3, [pc, #400]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d908      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fd0:	4b61      	ldr	r3, [pc, #388]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	495e      	ldr	r1, [pc, #376]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	4b59      	ldr	r3, [pc, #356]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d908      	bls.n	8002010 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ffe:	4b56      	ldr	r3, [pc, #344]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4953      	ldr	r1, [pc, #332]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800200c:	4313      	orrs	r3, r2
 800200e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	429a      	cmp	r2, r3
 800202a:	d908      	bls.n	800203e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f023 020f 	bic.w	r2, r3, #15
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4947      	ldr	r1, [pc, #284]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800203a:	4313      	orrs	r3, r2
 800203c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d055      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800204a:	4b43      	ldr	r3, [pc, #268]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4940      	ldr	r1, [pc, #256]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002058:	4313      	orrs	r3, r2
 800205a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d107      	bne.n	8002074 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002064:	4b3c      	ldr	r3, [pc, #240]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d121      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0e7      	b.n	8002244 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d107      	bne.n	800208c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800207c:	4b36      	ldr	r3, [pc, #216]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d115      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0db      	b.n	8002244 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0cf      	b.n	8002244 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020a4:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0c7      	b.n	8002244 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f023 0207 	bic.w	r2, r3, #7
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4925      	ldr	r1, [pc, #148]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c6:	f7fe fc3d 	bl	8000944 <HAL_GetTick>
 80020ca:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ce:	f7fe fc39 	bl	8000944 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0af      	b.n	8002244 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d1eb      	bne.n	80020ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d010      	beq.n	8002124 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	429a      	cmp	r2, r3
 8002110:	d208      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	490e      	ldr	r1, [pc, #56]	; (8002158 <HAL_RCC_ClockConfig+0x244>)
 8002120:	4313      	orrs	r3, r2
 8002122:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d214      	bcs.n	800215c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 020f 	bic.w	r2, r3, #15
 800213a:	4906      	ldr	r1, [pc, #24]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <HAL_RCC_ClockConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e077      	b.n	8002244 <HAL_RCC_ClockConfig+0x330>
 8002154:	52002000 	.word	0x52002000
 8002158:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d010      	beq.n	800218a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	4b37      	ldr	r3, [pc, #220]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002174:	429a      	cmp	r2, r3
 8002176:	d208      	bcs.n	800218a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002178:	4b34      	ldr	r3, [pc, #208]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	4931      	ldr	r1, [pc, #196]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 8002186:	4313      	orrs	r3, r2
 8002188:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d010      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	4b2c      	ldr	r3, [pc, #176]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d208      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4926      	ldr	r1, [pc, #152]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d208      	bcs.n	80021e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	491a      	ldr	r1, [pc, #104]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d010      	beq.n	8002214 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69da      	ldr	r2, [r3, #28]
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021fe:	429a      	cmp	r2, r3
 8002200:	d208      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	490f      	ldr	r1, [pc, #60]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 8002210:	4313      	orrs	r3, r2
 8002212:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002214:	f000 f822 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8002218:	4601      	mov	r1, r0
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_RCC_ClockConfig+0x338>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x33c>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	fa21 f303 	lsr.w	r3, r1, r3
 8002230:	4a08      	ldr	r2, [pc, #32]	; (8002254 <HAL_RCC_ClockConfig+0x340>)
 8002232:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RCC_ClockConfig+0x344>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fb1f 	bl	800087c <HAL_InitTick>
 800223e:	4603      	mov	r3, r0
 8002240:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002242:	7afb      	ldrb	r3, [r7, #11]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	58024400 	.word	0x58024400
 8002250:	080057c4 	.word	0x080057c4
 8002254:	20000000 	.word	0x20000000
 8002258:	20000008 	.word	0x20000008

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002262:	4baf      	ldr	r3, [pc, #700]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800226a:	2b18      	cmp	r3, #24
 800226c:	f200 814e 	bhi.w	800250c <HAL_RCC_GetSysClockFreq+0x2b0>
 8002270:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002276:	bf00      	nop
 8002278:	080022dd 	.word	0x080022dd
 800227c:	0800250d 	.word	0x0800250d
 8002280:	0800250d 	.word	0x0800250d
 8002284:	0800250d 	.word	0x0800250d
 8002288:	0800250d 	.word	0x0800250d
 800228c:	0800250d 	.word	0x0800250d
 8002290:	0800250d 	.word	0x0800250d
 8002294:	0800250d 	.word	0x0800250d
 8002298:	08002303 	.word	0x08002303
 800229c:	0800250d 	.word	0x0800250d
 80022a0:	0800250d 	.word	0x0800250d
 80022a4:	0800250d 	.word	0x0800250d
 80022a8:	0800250d 	.word	0x0800250d
 80022ac:	0800250d 	.word	0x0800250d
 80022b0:	0800250d 	.word	0x0800250d
 80022b4:	0800250d 	.word	0x0800250d
 80022b8:	08002309 	.word	0x08002309
 80022bc:	0800250d 	.word	0x0800250d
 80022c0:	0800250d 	.word	0x0800250d
 80022c4:	0800250d 	.word	0x0800250d
 80022c8:	0800250d 	.word	0x0800250d
 80022cc:	0800250d 	.word	0x0800250d
 80022d0:	0800250d 	.word	0x0800250d
 80022d4:	0800250d 	.word	0x0800250d
 80022d8:	0800230f 	.word	0x0800230f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022dc:	4b90      	ldr	r3, [pc, #576]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022e8:	4b8d      	ldr	r3, [pc, #564]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	4a8c      	ldr	r2, [pc, #560]	; (8002524 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
 80022f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80022fa:	e10a      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022fc:	4b89      	ldr	r3, [pc, #548]	; (8002524 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80022fe:	61bb      	str	r3, [r7, #24]
    break;
 8002300:	e107      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002302:	4b89      	ldr	r3, [pc, #548]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002304:	61bb      	str	r3, [r7, #24]
    break;
 8002306:	e104      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002308:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800230a:	61bb      	str	r3, [r7, #24]
    break;
 800230c:	e101      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800230e:	4b84      	ldr	r3, [pc, #528]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002318:	4b81      	ldr	r3, [pc, #516]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002322:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002324:	4b7e      	ldr	r3, [pc, #504]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800232e:	4b7c      	ldr	r3, [pc, #496]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	08db      	lsrs	r3, r3, #3
 8002334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	ee07 3a90 	vmov	s15, r3
 8002342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002346:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80da 	beq.w	8002506 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d05a      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x1b2>
 8002358:	2b01      	cmp	r3, #1
 800235a:	d302      	bcc.n	8002362 <HAL_RCC_GetSysClockFreq+0x106>
 800235c:	2b02      	cmp	r3, #2
 800235e:	d078      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002360:	e099      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002362:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d02d      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800236e:	4b6c      	ldr	r3, [pc, #432]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	08db      	lsrs	r3, r3, #3
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	4a6a      	ldr	r2, [pc, #424]	; (8002524 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002394:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002398:	4b61      	ldr	r3, [pc, #388]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ac:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002530 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80023c8:	e087      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002534 <HAL_RCC_GetSysClockFreq+0x2d8>
 80023d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80023f0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002530 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002408:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800240c:	e065      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002418:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2dc>
 800241c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002420:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002430:	ed97 6a02 	vldr	s12, [r7, #8]
 8002434:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002530 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800243c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002450:	e043      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800253c <HAL_RCC_GetSysClockFreq+0x2e0>
 8002460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002464:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002474:	ed97 6a02 	vldr	s12, [r7, #8]
 8002478:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002530 <HAL_RCC_GetSysClockFreq+0x2d4>
 800247c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002494:	e021      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002538 <HAL_RCC_GetSysClockFreq+0x2dc>
 80024a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80024bc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002530 <HAL_RCC_GetSysClockFreq+0x2d4>
 80024c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024d8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	0a5b      	lsrs	r3, r3, #9
 80024e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024e4:	3301      	adds	r3, #1
 80024e6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80024f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024fe:	ee17 3a90 	vmov	r3, s15
 8002502:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002504:	e005      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
    break;
 800250a:	e002      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800250e:	61bb      	str	r3, [r7, #24]
    break;
 8002510:	bf00      	nop
  }

  return sysclockfreq;
 8002512:	69bb      	ldr	r3, [r7, #24]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3724      	adds	r7, #36	; 0x24
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	58024400 	.word	0x58024400
 8002524:	03d09000 	.word	0x03d09000
 8002528:	003d0900 	.word	0x003d0900
 800252c:	017d7840 	.word	0x017d7840
 8002530:	46000000 	.word	0x46000000
 8002534:	4c742400 	.word	0x4c742400
 8002538:	4a742400 	.word	0x4a742400
 800253c:	4bbebc20 	.word	0x4bbebc20

08002540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002544:	f000 fef6 	bl	8003334 <HAL_RCCEx_GetD1SysClockFreq>
 8002548:	4601      	mov	r1, r0
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <HAL_RCC_GetHCLKFreq+0x2c>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	4a07      	ldr	r2, [pc, #28]	; (8002570 <HAL_RCC_GetHCLKFreq+0x30>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	fa21 f303 	lsr.w	r3, r1, r3
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <HAL_RCC_GetHCLKFreq+0x34>)
 8002560:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif
  return SystemD2Clock;
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <HAL_RCC_GetHCLKFreq+0x34>)
 8002564:	681b      	ldr	r3, [r3, #0]
}
 8002566:	4618      	mov	r0, r3
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	58024400 	.word	0x58024400
 8002570:	080057c4 	.word	0x080057c4
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002580:	2300      	movs	r3, #0
 8002582:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002584:	2300      	movs	r3, #0
 8002586:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d03d      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800259c:	d013      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800259e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a2:	d802      	bhi.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80025a8:	e01f      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80025aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025ae:	d013      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80025b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025b4:	d01c      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80025b6:	e018      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b8:	4baf      	ldr	r3, [pc, #700]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	4aae      	ldr	r2, [pc, #696]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025c4:	e015      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2102      	movs	r1, #2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fecd 	bl	800336c <RCCEx_PLL2_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025d6:	e00c      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3324      	adds	r3, #36	; 0x24
 80025dc:	2102      	movs	r1, #2
 80025de:	4618      	mov	r0, r3
 80025e0:	f000 ff76 	bl	80034d0 <RCCEx_PLL3_Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025e8:	e003      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
      break;
 80025ee:	e000      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80025f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80025f8:	4b9f      	ldr	r3, [pc, #636]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002604:	499c      	ldr	r1, [pc, #624]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002606:	4313      	orrs	r3, r2
 8002608:	650b      	str	r3, [r1, #80]	; 0x50
 800260a:	e001      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d03d      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	2b04      	cmp	r3, #4
 8002622:	d826      	bhi.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002624:	a201      	add	r2, pc, #4	; (adr r2, 800262c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	08002641 	.word	0x08002641
 8002630:	0800264f 	.word	0x0800264f
 8002634:	08002661 	.word	0x08002661
 8002638:	08002679 	.word	0x08002679
 800263c:	08002679 	.word	0x08002679
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002640:	4b8d      	ldr	r3, [pc, #564]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	4a8c      	ldr	r2, [pc, #560]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800264c:	e015      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fe89 	bl	800336c <RCCEx_PLL2_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800265e:	e00c      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3324      	adds	r3, #36	; 0x24
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f000 ff32 	bl	80034d0 <RCCEx_PLL3_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002670:	e003      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	75fb      	strb	r3, [r7, #23]
      break;
 8002676:	e000      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002680:	4b7d      	ldr	r3, [pc, #500]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002684:	f023 0207 	bic.w	r2, r3, #7
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	497a      	ldr	r1, [pc, #488]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800268e:	4313      	orrs	r3, r2
 8002690:	650b      	str	r3, [r1, #80]	; 0x50
 8002692:	e001      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d03e      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	2b80      	cmp	r3, #128	; 0x80
 80026aa:	d01c      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80026ac:	2b80      	cmp	r3, #128	; 0x80
 80026ae:	d804      	bhi.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x142>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80026b4:	2b40      	cmp	r3, #64	; 0x40
 80026b6:	d00d      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80026b8:	e01e      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80026ba:	2bc0      	cmp	r3, #192	; 0xc0
 80026bc:	d01f      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x186>
 80026be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c2:	d01e      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80026c4:	e018      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c6:	4b6c      	ldr	r3, [pc, #432]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	4a6b      	ldr	r2, [pc, #428]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80026d2:	e017      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fe46 	bl	800336c <RCCEx_PLL2_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80026e4:	e00e      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3324      	adds	r3, #36	; 0x24
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 feef 	bl	80034d0 <RCCEx_PLL3_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80026f6:	e005      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
      break;
 80026fc:	e002      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800270a:	4b5b      	ldr	r3, [pc, #364]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800270c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800270e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	4958      	ldr	r1, [pc, #352]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002718:	4313      	orrs	r3, r2
 800271a:	650b      	str	r3, [r1, #80]	; 0x50
 800271c:	e001      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272a:	2b00      	cmp	r3, #0
 800272c:	d044      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002738:	d01f      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800273a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800273e:	d805      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002744:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002748:	d00e      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800274a:	e01f      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800274c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002750:	d01f      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002752:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002756:	d01e      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002758:	e018      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	4a46      	ldr	r2, [pc, #280]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002766:	e017      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fdfc 	bl	800336c <RCCEx_PLL2_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002778:	e00e      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3324      	adds	r3, #36	; 0x24
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f000 fea5 	bl	80034d0 <RCCEx_PLL3_Config>
 8002786:	4603      	mov	r3, r0
 8002788:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800278a:	e005      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	75fb      	strb	r3, [r7, #23]
      break;
 8002790:	e002      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002792:	bf00      	nop
 8002794:	e000      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800279e:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80027ac:	4932      	ldr	r1, [pc, #200]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	658b      	str	r3, [r1, #88]	; 0x58
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d044      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027ce:	d01f      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80027d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027d4:	d805      	bhi.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80027da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027de:	d00e      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x286>
 80027e0:	e01f      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80027e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027e6:	d01f      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80027e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ec:	d01e      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80027ee:	e018      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	4a20      	ldr	r2, [pc, #128]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80027f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027fc:	e017      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fdb1 	bl	800336c <RCCEx_PLL2_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800280e:	e00e      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3324      	adds	r3, #36	; 0x24
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fe5a 	bl	80034d0 <RCCEx_PLL3_Config>
 800281c:	4603      	mov	r3, r0
 800281e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002820:	e005      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
      break;
 8002826:	e002      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002828:	bf00      	nop
 800282a:	e000      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800282c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002842:	490d      	ldr	r1, [pc, #52]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002844:	4313      	orrs	r3, r2
 8002846:	658b      	str	r3, [r1, #88]	; 0x58
 8002848:	e001      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d035      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285e:	2b10      	cmp	r3, #16
 8002860:	d00c      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002862:	2b10      	cmp	r3, #16
 8002864:	d802      	bhi.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01b      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800286a:	e017      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800286c:	2b20      	cmp	r3, #32
 800286e:	d00c      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002870:	2b30      	cmp	r3, #48	; 0x30
 8002872:	d018      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002874:	e012      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002876:	bf00      	nop
 8002878:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800287c:	4baf      	ldr	r3, [pc, #700]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	4aae      	ldr	r2, [pc, #696]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002888:	e00e      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fd6b 	bl	800336c <RCCEx_PLL2_Config>
 8002896:	4603      	mov	r3, r0
 8002898:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800289a:	e005      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	75fb      	strb	r3, [r7, #23]
      break;
 80028a0:	e002      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80028a2:	bf00      	nop
 80028a4:	e000      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80028a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028ae:	4ba3      	ldr	r3, [pc, #652]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ba:	49a0      	ldr	r1, [pc, #640]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80028c0:	e001      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d042      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028da:	d01f      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80028dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e0:	d805      	bhi.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ea:	d00e      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x392>
 80028ec:	e01f      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80028ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028f2:	d01f      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80028f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028f8:	d01e      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80028fa:	e018      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028fc:	4b8f      	ldr	r3, [pc, #572]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	4a8e      	ldr	r2, [pc, #568]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002908:	e017      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fd2b 	bl	800336c <RCCEx_PLL2_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800291a:	e00e      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3324      	adds	r3, #36	; 0x24
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fdd4 	bl	80034d0 <RCCEx_PLL3_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800292c:	e005      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
      break;
 8002932:	e002      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002940:	4b7e      	ldr	r3, [pc, #504]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002944:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	497b      	ldr	r1, [pc, #492]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	650b      	str	r3, [r1, #80]	; 0x50
 8002952:	e001      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d042      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800296c:	d01b      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800296e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002972:	d805      	bhi.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002974:	2b00      	cmp	r3, #0
 8002976:	d022      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800297e:	e01b      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002984:	d01d      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002986:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800298a:	d01c      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800298c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002990:	d01b      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002992:	e011      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	2101      	movs	r1, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fce6 	bl	800336c <RCCEx_PLL2_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029a4:	e012      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3324      	adds	r3, #36	; 0x24
 80029aa:	2101      	movs	r1, #1
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fd8f 	bl	80034d0 <RCCEx_PLL3_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80029b6:	e009      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	75fb      	strb	r3, [r7, #23]
      break;
 80029bc:	e006      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80029be:	bf00      	nop
 80029c0:	e004      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80029c2:	bf00      	nop
 80029c4:	e002      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80029c6:	bf00      	nop
 80029c8:	e000      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80029ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029d2:	4b5a      	ldr	r3, [pc, #360]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029de:	4957      	ldr	r1, [pc, #348]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	650b      	str	r3, [r1, #80]	; 0x50
 80029e4:	e001      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d044      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a00:	d01b      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a06:	d805      	bhi.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d022      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002a12:	e01b      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a18:	d01d      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a1e:	d01c      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002a20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a24:	d01b      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002a26:	e011      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fc9c 	bl	800336c <RCCEx_PLL2_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a38:	e012      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3324      	adds	r3, #36	; 0x24
 8002a3e:	2101      	movs	r1, #1
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 fd45 	bl	80034d0 <RCCEx_PLL3_Config>
 8002a46:	4603      	mov	r3, r0
 8002a48:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a4a:	e009      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a50:	e006      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e004      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e002      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e000      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a66:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a74:	4931      	ldr	r1, [pc, #196]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	658b      	str	r3, [r1, #88]	; 0x58
 8002a7a:	e001      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d02d      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a9a:	d009      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002aa0:	e00f      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	4a25      	ldr	r2, [pc, #148]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002aae:	e00c      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fc58 	bl	800336c <RCCEx_PLL2_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ac0:	e003      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac6:	e000      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8002ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002adc:	4917      	ldr	r1, [pc, #92]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	650b      	str	r3, [r1, #80]	; 0x50
 8002ae2:	e001      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d035      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d81b      	bhi.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002afc:	a201      	add	r2, pc, #4	; (adr r2, 8002b04 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b02:	bf00      	nop
 8002b04:	08002b41 	.word	0x08002b41
 8002b08:	08002b15 	.word	0x08002b15
 8002b0c:	08002b23 	.word	0x08002b23
 8002b10:	08002b41 	.word	0x08002b41
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b20:	e00f      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2102      	movs	r1, #2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fc1f 	bl	800336c <RCCEx_PLL2_Config>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b32:	e006      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	75fb      	strb	r3, [r7, #23]
      break;
 8002b38:	e003      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002b3a:	bf00      	nop
 8002b3c:	58024400 	.word	0x58024400
      break;
 8002b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b48:	4bba      	ldr	r3, [pc, #744]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	f023 0203 	bic.w	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b54:	49b7      	ldr	r1, [pc, #732]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b5a:	e001      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8086 	beq.w	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b6e:	4bb2      	ldr	r3, [pc, #712]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4ab1      	ldr	r2, [pc, #708]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b7a:	f7fd fee3 	bl	8000944 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b80:	e009      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b82:	f7fd fedf 	bl	8000944 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b64      	cmp	r3, #100	; 0x64
 8002b8e:	d902      	bls.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	75fb      	strb	r3, [r7, #23]
        break;
 8002b94:	e005      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b96:	4ba8      	ldr	r3, [pc, #672]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0ef      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d166      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ba8:	4ba2      	ldr	r3, [pc, #648]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bb2:	4053      	eors	r3, r2
 8002bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d013      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bbc:	4b9d      	ldr	r3, [pc, #628]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bc6:	4b9b      	ldr	r3, [pc, #620]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a9a      	ldr	r2, [pc, #616]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd2:	4b98      	ldr	r3, [pc, #608]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a97      	ldr	r2, [pc, #604]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bde:	4a95      	ldr	r2, [pc, #596]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bee:	d115      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fd fea8 	bl	8000944 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7fd fea4 	bl	8000944 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d902      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	75fb      	strb	r3, [r7, #23]
            break;
 8002c0e:	e005      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c10:	4b88      	ldr	r3, [pc, #544]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ed      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d126      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c30:	d10d      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002c32:	4b80      	ldr	r3, [pc, #512]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c40:	0919      	lsrs	r1, r3, #4
 8002c42:	4b7e      	ldr	r3, [pc, #504]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002c44:	400b      	ands	r3, r1
 8002c46:	497b      	ldr	r1, [pc, #492]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	610b      	str	r3, [r1, #16]
 8002c4c:	e005      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002c4e:	4b79      	ldr	r3, [pc, #484]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	4a78      	ldr	r2, [pc, #480]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c58:	6113      	str	r3, [r2, #16]
 8002c5a:	4b76      	ldr	r3, [pc, #472]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	4972      	ldr	r1, [pc, #456]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	670b      	str	r3, [r1, #112]	; 0x70
 8002c6e:	e004      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	75bb      	strb	r3, [r7, #22]
 8002c74:	e001      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
 8002c78:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d07d      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c8a:	2b28      	cmp	r3, #40	; 0x28
 8002c8c:	d866      	bhi.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002c8e:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002d63 	.word	0x08002d63
 8002c98:	08002d5d 	.word	0x08002d5d
 8002c9c:	08002d5d 	.word	0x08002d5d
 8002ca0:	08002d5d 	.word	0x08002d5d
 8002ca4:	08002d5d 	.word	0x08002d5d
 8002ca8:	08002d5d 	.word	0x08002d5d
 8002cac:	08002d5d 	.word	0x08002d5d
 8002cb0:	08002d5d 	.word	0x08002d5d
 8002cb4:	08002d39 	.word	0x08002d39
 8002cb8:	08002d5d 	.word	0x08002d5d
 8002cbc:	08002d5d 	.word	0x08002d5d
 8002cc0:	08002d5d 	.word	0x08002d5d
 8002cc4:	08002d5d 	.word	0x08002d5d
 8002cc8:	08002d5d 	.word	0x08002d5d
 8002ccc:	08002d5d 	.word	0x08002d5d
 8002cd0:	08002d5d 	.word	0x08002d5d
 8002cd4:	08002d4b 	.word	0x08002d4b
 8002cd8:	08002d5d 	.word	0x08002d5d
 8002cdc:	08002d5d 	.word	0x08002d5d
 8002ce0:	08002d5d 	.word	0x08002d5d
 8002ce4:	08002d5d 	.word	0x08002d5d
 8002ce8:	08002d5d 	.word	0x08002d5d
 8002cec:	08002d5d 	.word	0x08002d5d
 8002cf0:	08002d5d 	.word	0x08002d5d
 8002cf4:	08002d63 	.word	0x08002d63
 8002cf8:	08002d5d 	.word	0x08002d5d
 8002cfc:	08002d5d 	.word	0x08002d5d
 8002d00:	08002d5d 	.word	0x08002d5d
 8002d04:	08002d5d 	.word	0x08002d5d
 8002d08:	08002d5d 	.word	0x08002d5d
 8002d0c:	08002d5d 	.word	0x08002d5d
 8002d10:	08002d5d 	.word	0x08002d5d
 8002d14:	08002d63 	.word	0x08002d63
 8002d18:	08002d5d 	.word	0x08002d5d
 8002d1c:	08002d5d 	.word	0x08002d5d
 8002d20:	08002d5d 	.word	0x08002d5d
 8002d24:	08002d5d 	.word	0x08002d5d
 8002d28:	08002d5d 	.word	0x08002d5d
 8002d2c:	08002d5d 	.word	0x08002d5d
 8002d30:	08002d5d 	.word	0x08002d5d
 8002d34:	08002d63 	.word	0x08002d63
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fb14 	bl	800336c <RCCEx_PLL2_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d48:	e00c      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3324      	adds	r3, #36	; 0x24
 8002d4e:	2101      	movs	r1, #1
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fbbd 	bl	80034d0 <RCCEx_PLL3_Config>
 8002d56:	4603      	mov	r3, r0
 8002d58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d5a:	e003      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d60:	e000      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d64:	7dfb      	ldrb	r3, [r7, #23]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d6a:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d76:	492f      	ldr	r1, [pc, #188]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	654b      	str	r3, [r1, #84]	; 0x54
 8002d7c:	e001      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
 8002d80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d037      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	d820      	bhi.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002ddf 	.word	0x08002ddf
 8002da0:	08002db5 	.word	0x08002db5
 8002da4:	08002dc7 	.word	0x08002dc7
 8002da8:	08002ddf 	.word	0x08002ddf
 8002dac:	08002ddf 	.word	0x08002ddf
 8002db0:	08002ddf 	.word	0x08002ddf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	2101      	movs	r1, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fad6 	bl	800336c <RCCEx_PLL2_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002dc4:	e00c      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3324      	adds	r3, #36	; 0x24
 8002dca:	2101      	movs	r1, #1
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fb7f 	bl	80034d0 <RCCEx_PLL3_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002dd6:	e003      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	75fb      	strb	r3, [r7, #23]
      break;
 8002ddc:	e000      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f023 0207 	bic.w	r2, r3, #7
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df2:	4910      	ldr	r1, [pc, #64]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	654b      	str	r3, [r1, #84]	; 0x54
 8002df8:	e001      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d040      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d827      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002e14:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e6b 	.word	0x08002e6b
 8002e20:	08002e41 	.word	0x08002e41
 8002e24:	08002e53 	.word	0x08002e53
 8002e28:	08002e6b 	.word	0x08002e6b
 8002e2c:	08002e6b 	.word	0x08002e6b
 8002e30:	08002e6b 	.word	0x08002e6b
 8002e34:	58024400 	.word	0x58024400
 8002e38:	58024800 	.word	0x58024800
 8002e3c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3304      	adds	r3, #4
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fa90 	bl	800336c <RCCEx_PLL2_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e50:	e00c      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3324      	adds	r3, #36	; 0x24
 8002e56:	2101      	movs	r1, #1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fb39 	bl	80034d0 <RCCEx_PLL3_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e62:	e003      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	75fb      	strb	r3, [r7, #23]
      break;
 8002e68:	e000      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e72:	4bb2      	ldr	r3, [pc, #712]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	f023 0207 	bic.w	r2, r3, #7
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	49ae      	ldr	r1, [pc, #696]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	658b      	str	r3, [r1, #88]	; 0x58
 8002e86:	e001      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d044      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea2:	d01b      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea8:	d805      	bhi.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d022      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002eb4:	e01b      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eba:	d01d      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec0:	d01c      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002ec2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ec6:	d01b      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002ec8:	e011      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fa4b 	bl	800336c <RCCEx_PLL2_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002eda:	e012      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3324      	adds	r3, #36	; 0x24
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 faf4 	bl	80034d0 <RCCEx_PLL3_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002eec:	e009      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef2:	e006      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002ef4:	bf00      	nop
 8002ef6:	e004      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002ef8:	bf00      	nop
 8002efa:	e002      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002efc:	bf00      	nop
 8002efe:	e000      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f08:	4b8c      	ldr	r3, [pc, #560]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f16:	4989      	ldr	r1, [pc, #548]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	654b      	str	r3, [r1, #84]	; 0x54
 8002f1c:	e001      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1e:	7dfb      	ldrb	r3, [r7, #23]
 8002f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d044      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f38:	d01b      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3e:	d805      	bhi.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d022      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002f4a:	e01b      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	d01d      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002f52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f56:	d01c      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002f58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f5c:	d01b      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002f5e:	e011      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fa00 	bl	800336c <RCCEx_PLL2_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f70:	e012      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3324      	adds	r3, #36	; 0x24
 8002f76:	2102      	movs	r1, #2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 faa9 	bl	80034d0 <RCCEx_PLL3_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f82:	e009      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
      break;
 8002f88:	e006      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e004      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e002      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f9e:	4b67      	ldr	r3, [pc, #412]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fac:	4963      	ldr	r1, [pc, #396]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	658b      	str	r3, [r1, #88]	; 0x58
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d044      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fce:	d01b      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd4:	d805      	bhi.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d022      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002fe0:	e01b      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe6:	d01d      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002fe8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002fec:	d01c      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002fee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ff2:	d01b      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002ff4:	e011      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 f9b5 	bl	800336c <RCCEx_PLL2_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003006:	e012      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3324      	adds	r3, #36	; 0x24
 800300c:	2102      	movs	r1, #2
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fa5e 	bl	80034d0 <RCCEx_PLL3_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003018:	e009      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
      break;
 800301e:	e006      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003020:	bf00      	nop
 8003022:	e004      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003024:	bf00      	nop
 8003026:	e002      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003028:	bf00      	nop
 800302a:	e000      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800302c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003034:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003042:	493e      	ldr	r1, [pc, #248]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003044:	4313      	orrs	r3, r2
 8003046:	658b      	str	r3, [r1, #88]	; 0x58
 8003048:	e001      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003064:	d10a      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3324      	adds	r3, #36	; 0x24
 800306a:	2102      	movs	r1, #2
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fa2f 	bl	80034d0 <RCCEx_PLL3_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800307c:	4b2f      	ldr	r3, [pc, #188]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308a:	492c      	ldr	r1, [pc, #176]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a6:	d10a      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3324      	adds	r3, #36	; 0x24
 80030ac:	2102      	movs	r1, #2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fa0e 	bl	80034d0 <RCCEx_PLL3_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030be:	4b1f      	ldr	r3, [pc, #124]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030cc:	491b      	ldr	r1, [pc, #108]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d032      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e8:	d00d      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80030ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ee:	d016      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f936 	bl	800336c <RCCEx_PLL2_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003104:	e00c      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3324      	adds	r3, #36	; 0x24
 800310a:	2102      	movs	r1, #2
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f9df 	bl	80034d0 <RCCEx_PLL3_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003116:	e003      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	75fb      	strb	r3, [r7, #23]
      break;
 800311c:	e000      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800311e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10c      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003134:	4901      	ldr	r1, [pc, #4]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	658b      	str	r3, [r1, #88]	; 0x58
 800313a:	e003      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800313c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d02f      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800315a:	d00c      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800315c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003160:	d015      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d10f      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003168:	4b71      	ldr	r3, [pc, #452]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	4a70      	ldr	r2, [pc, #448]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800316e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003174:	e00c      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3324      	adds	r3, #36	; 0x24
 800317a:	2101      	movs	r1, #1
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f9a7 	bl	80034d0 <RCCEx_PLL3_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003186:	e003      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	75fb      	strb	r3, [r7, #23]
      break;
 800318c:	e000      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800318e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003196:	4b66      	ldr	r3, [pc, #408]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a4:	4962      	ldr	r1, [pc, #392]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	654b      	str	r3, [r1, #84]	; 0x54
 80031aa:	e001      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d029      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d007      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80031ca:	e00f      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031cc:	4b58      	ldr	r3, [pc, #352]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	4a57      	ldr	r2, [pc, #348]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031d8:	e00b      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	2102      	movs	r1, #2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f8c3 	bl	800336c <RCCEx_PLL2_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031ea:	e002      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	75fb      	strb	r3, [r7, #23]
      break;
 80031f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d109      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031f8:	4b4d      	ldr	r3, [pc, #308]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80031fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	494a      	ldr	r1, [pc, #296]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003206:	4313      	orrs	r3, r2
 8003208:	64cb      	str	r3, [r1, #76]	; 0x4c
 800320a:	e001      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3324      	adds	r3, #36	; 0x24
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f954 	bl	80034d0 <RCCEx_PLL3_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02f      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003246:	d00c      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324c:	d802      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d011      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003252:	e00d      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003258:	d00f      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800325a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800325e:	d00e      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003260:	e006      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003262:	4b33      	ldr	r3, [pc, #204]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	4a32      	ldr	r2, [pc, #200]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800326e:	e007      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
      break;
 8003274:	e004      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003276:	bf00      	nop
 8003278:	e002      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800327a:	bf00      	nop
 800327c:	e000      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800327e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d109      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003292:	4927      	ldr	r1, [pc, #156]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003294:	4313      	orrs	r3, r2
 8003296:	654b      	str	r3, [r1, #84]	; 0x54
 8003298:	e001      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032aa:	4b21      	ldr	r3, [pc, #132]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	491e      	ldr	r1, [pc, #120]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032c8:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d4:	4916      	ldr	r1, [pc, #88]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	4a11      	ldr	r2, [pc, #68]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032f0:	6113      	str	r3, [r2, #16]
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80032fc:	490c      	ldr	r1, [pc, #48]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	da08      	bge.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003316:	4906      	ldr	r1, [pc, #24]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003318:	4313      	orrs	r3, r2
 800331a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800331c:	7dbb      	ldrb	r3, [r7, #22]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	58024400 	.word	0x58024400

08003334 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003338:	f7fe ff90 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800333c:	4601      	mov	r1, r0
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	4a06      	ldr	r2, [pc, #24]	; (8003364 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	fa21 f303 	lsr.w	r3, r1, r3
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003356:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	58024400 	.word	0x58024400
 8003364:	080057c4 	.word	0x080057c4
 8003368:	20000000 	.word	0x20000000

0800336c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800337a:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b03      	cmp	r3, #3
 8003384:	d101      	bne.n	800338a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e099      	b.n	80034be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800338a:	4b4f      	ldr	r3, [pc, #316]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a4e      	ldr	r2, [pc, #312]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003390:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003396:	f7fd fad5 	bl	8000944 <HAL_GetTick>
 800339a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800339c:	e008      	b.n	80033b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800339e:	f7fd fad1 	bl	8000944 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e086      	b.n	80034be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80033b0:	4b45      	ldr	r3, [pc, #276]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80033bc:	4b42      	ldr	r3, [pc, #264]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	031b      	lsls	r3, r3, #12
 80033ca:	493f      	ldr	r1, [pc, #252]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	628b      	str	r3, [r1, #40]	; 0x28
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	3b01      	subs	r3, #1
 80033e0:	025b      	lsls	r3, r3, #9
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003400:	4931      	ldr	r1, [pc, #196]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003406:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	492d      	ldr	r1, [pc, #180]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003414:	4313      	orrs	r3, r2
 8003416:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003418:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	f023 0220 	bic.w	r2, r3, #32
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4928      	ldr	r1, [pc, #160]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800342a:	4b27      	ldr	r3, [pc, #156]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	4a26      	ldr	r2, [pc, #152]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003430:	f023 0310 	bic.w	r3, r3, #16
 8003434:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800343a:	4b24      	ldr	r3, [pc, #144]	; (80034cc <RCCEx_PLL2_Config+0x160>)
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	69d2      	ldr	r2, [r2, #28]
 8003442:	00d2      	lsls	r2, r2, #3
 8003444:	4920      	ldr	r1, [pc, #128]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800344a:	4b1f      	ldr	r3, [pc, #124]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003450:	f043 0310 	orr.w	r3, r3, #16
 8003454:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003466:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003468:	e00f      	b.n	800348a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d106      	bne.n	800347e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003470:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800347c:	e005      	b.n	800348a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003488:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800348a:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 8003490:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003496:	f7fd fa55 	bl	8000944 <HAL_GetTick>
 800349a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800349c:	e008      	b.n	80034b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800349e:	f7fd fa51 	bl	8000944 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e006      	b.n	80034be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <RCCEx_PLL2_Config+0x15c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
 80034cc:	ffff0007 	.word	0xffff0007

080034d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034de:	4b53      	ldr	r3, [pc, #332]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d101      	bne.n	80034ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e099      	b.n	8003622 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80034ee:	4b4f      	ldr	r3, [pc, #316]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4e      	ldr	r2, [pc, #312]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80034f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fa:	f7fd fa23 	bl	8000944 <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003500:	e008      	b.n	8003514 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003502:	f7fd fa1f 	bl	8000944 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e086      	b.n	8003622 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003514:	4b45      	ldr	r3, [pc, #276]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003520:	4b42      	ldr	r3, [pc, #264]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	051b      	lsls	r3, r3, #20
 800352e:	493f      	ldr	r1, [pc, #252]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	628b      	str	r3, [r1, #40]	; 0x28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	3b01      	subs	r3, #1
 800353a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	3b01      	subs	r3, #1
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	b29b      	uxth	r3, r3
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	3b01      	subs	r3, #1
 8003550:	041b      	lsls	r3, r3, #16
 8003552:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	3b01      	subs	r3, #1
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003564:	4931      	ldr	r1, [pc, #196]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800356a:	4b30      	ldr	r3, [pc, #192]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	492d      	ldr	r1, [pc, #180]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 8003578:	4313      	orrs	r3, r2
 800357a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800357c:	4b2b      	ldr	r3, [pc, #172]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	4928      	ldr	r1, [pc, #160]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 800358a:	4313      	orrs	r3, r2
 800358c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800358e:	4b27      	ldr	r3, [pc, #156]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	4a26      	ldr	r2, [pc, #152]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 8003594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 800359c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <RCCEx_PLL3_Config+0x160>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	69d2      	ldr	r2, [r2, #28]
 80035a6:	00d2      	lsls	r2, r2, #3
 80035a8:	4920      	ldr	r1, [pc, #128]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80035ae:	4b1f      	ldr	r3, [pc, #124]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	4a1e      	ldr	r2, [pc, #120]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035cc:	e00f      	b.n	80035ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80035d4:	4b15      	ldr	r3, [pc, #84]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	4a14      	ldr	r2, [pc, #80]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035e0:	e005      	b.n	80035ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	4a11      	ldr	r2, [pc, #68]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80035ee:	4b0f      	ldr	r3, [pc, #60]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035fa:	f7fd f9a3 	bl	8000944 <HAL_GetTick>
 80035fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003600:	e008      	b.n	8003614 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003602:	f7fd f99f 	bl	8000944 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e006      	b.n	8003622 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <RCCEx_PLL3_Config+0x15c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	58024400 	.word	0x58024400
 8003630:	ffff0007 	.word	0xffff0007

08003634 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003634:	b084      	sub	sp, #16
 8003636:	b580      	push	{r7, lr}
 8003638:	b084      	sub	sp, #16
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	f107 001c 	add.w	r0, r7, #28
 8003642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	2b01      	cmp	r3, #1
 800364a:	d120      	bne.n	800368e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <USB_CoreInit+0xc0>)
 800365e:	4013      	ands	r3, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f001 f826 	bl	80046d4 <USB_CoreReset>
 8003688:	4603      	mov	r3, r0
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e01a      	b.n	80036c4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f001 f81a 	bl	80046d4 <USB_CoreReset>
 80036a0:	4603      	mov	r3, r0
 80036a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
 80036b6:	e005      	b.n	80036c4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d10b      	bne.n	80036e2 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f043 0206 	orr.w	r2, r3, #6
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f043 0220 	orr.w	r2, r3, #32
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036ee:	b004      	add	sp, #16
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	ffbdffbf 	.word	0xffbdffbf

080036f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f043 0201 	orr.w	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 0201 	bic.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d106      	bne.n	8003768 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	e00b      	b.n	8003780 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	e001      	b.n	8003780 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e003      	b.n	8003788 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003780:	2032      	movs	r0, #50	; 0x32
 8003782:	f7fd f8eb 	bl	800095c <HAL_Delay>

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003790:	b084      	sub	sp, #16
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800379e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	e009      	b.n	80037c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	3340      	adds	r3, #64	; 0x40
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	2200      	movs	r2, #0
 80037bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	3301      	adds	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b0e      	cmp	r3, #14
 80037c8:	d9f2      	bls.n	80037b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d11c      	bne.n	800380a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e005      	b.n	8003816 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800381c:	461a      	mov	r2, r3
 800381e:	2300      	movs	r3, #0
 8003820:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003828:	4619      	mov	r1, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003830:	461a      	mov	r2, r3
 8003832:	680b      	ldr	r3, [r1, #0]
 8003834:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003838:	2b01      	cmp	r3, #1
 800383a:	d10c      	bne.n	8003856 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d104      	bne.n	800384c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003842:	2100      	movs	r1, #0
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f949 	bl	8003adc <USB_SetDevSpeed>
 800384a:	e008      	b.n	800385e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800384c:	2101      	movs	r1, #1
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f944 	bl	8003adc <USB_SetDevSpeed>
 8003854:	e003      	b.n	800385e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003856:	2103      	movs	r1, #3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f93f 	bl	8003adc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800385e:	2110      	movs	r1, #16
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8f3 	bl	8003a4c <USB_FlushTxFifo>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f911 	bl	8003a98 <USB_FlushRxFifo>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003886:	461a      	mov	r2, r3
 8003888:	2300      	movs	r3, #0
 800388a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003892:	461a      	mov	r2, r3
 8003894:	2300      	movs	r3, #0
 8003896:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389e:	461a      	mov	r2, r3
 80038a0:	2300      	movs	r3, #0
 80038a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	e043      	b.n	8003932 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038c0:	d118      	bne.n	80038f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d4:	461a      	mov	r2, r3
 80038d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e013      	b.n	8003906 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ea:	461a      	mov	r2, r3
 80038ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e008      	b.n	8003906 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003900:	461a      	mov	r2, r3
 8003902:	2300      	movs	r3, #0
 8003904:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003912:	461a      	mov	r2, r3
 8003914:	2300      	movs	r3, #0
 8003916:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003924:	461a      	mov	r2, r3
 8003926:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800392a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	3301      	adds	r3, #1
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	429a      	cmp	r2, r3
 8003938:	d3b7      	bcc.n	80038aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e043      	b.n	80039c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003956:	d118      	bne.n	800398a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396a:	461a      	mov	r2, r3
 800396c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e013      	b.n	800399c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	e008      	b.n	800399c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	461a      	mov	r2, r3
 8003998:	2300      	movs	r3, #0
 800399a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	461a      	mov	r2, r3
 80039aa:	2300      	movs	r3, #0
 80039ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ba:	461a      	mov	r2, r3
 80039bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3301      	adds	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d3b7      	bcc.n	8003940 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d105      	bne.n	8003a04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f043 0210 	orr.w	r2, r3, #16
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <USB_DevInit+0x2b4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f043 0208 	orr.w	r2, r3, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d105      	bne.n	8003a34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699a      	ldr	r2, [r3, #24]
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <USB_DevInit+0x2b8>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a40:	b004      	add	sp, #16
 8003a42:	4770      	bx	lr
 8003a44:	803c3800 	.word	0x803c3800
 8003a48:	40000004 	.word	0x40000004

08003a4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <USB_FlushTxFifo+0x48>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e006      	b.n	8003a86 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d0f0      	beq.n	8003a66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	00030d40 	.word	0x00030d40

08003a98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3301      	adds	r3, #1
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a09      	ldr	r2, [pc, #36]	; (8003ad8 <USB_FlushRxFifo+0x40>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e006      	b.n	8003aca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	d0f0      	beq.n	8003aaa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	00030d40 	.word	0x00030d40

08003adc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	68f9      	ldr	r1, [r7, #12]
 8003af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d139      	bne.n	8003ba0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	68f9      	ldr	r1, [r7, #12]
 8003b46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d153      	bne.n	8003c0c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	78db      	ldrb	r3, [r3, #3]
 8003b7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	059b      	lsls	r3, r3, #22
 8003b86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	0159      	lsls	r1, r3, #5
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	440b      	add	r3, r1
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	4619      	mov	r1, r3
 8003b98:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <USB_ActivateEndpoint+0x10c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]
 8003b9e:	e035      	b.n	8003c0c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	68f9      	ldr	r1, [r7, #12]
 8003bba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d119      	bne.n	8003c0c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	78db      	ldrb	r3, [r3, #3]
 8003bf2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	0159      	lsls	r1, r3, #5
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	440b      	add	r3, r1
 8003c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c04:	4619      	mov	r1, r3
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <USB_ActivateEndpoint+0x10c>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	10008000 	.word	0x10008000

08003c20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	785b      	ldrb	r3, [r3, #1]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d135      	bne.n	8003ca8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	2101      	movs	r1, #1
 8003c72:	fa01 f303 	lsl.w	r3, r1, r3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c80:	4013      	ands	r3, r2
 8003c82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	0159      	lsls	r1, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	440b      	add	r3, r1
 8003c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	; (8003d20 <USB_DeactivateEndpoint+0x100>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
 8003ca6:	e034      	b.n	8003d12 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	2101      	movs	r1, #1
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	68f9      	ldr	r1, [r7, #12]
 8003cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc8:	4013      	ands	r3, r2
 8003cca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	2101      	movs	r1, #1
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	68f9      	ldr	r1, [r7, #12]
 8003ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cec:	4013      	ands	r3, r2
 8003cee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	0159      	lsls	r1, r3, #5
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	440b      	add	r3, r1
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <USB_DeactivateEndpoint+0x104>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	ec337800 	.word	0xec337800
 8003d24:	eff37800 	.word	0xeff37800

08003d28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	4613      	mov	r3, r2
 8003d34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 8163 	bne.w	8004010 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d132      	bne.n	8003db8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	0159      	lsls	r1, r3, #5
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	440b      	add	r3, r1
 8003d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4ba5      	ldr	r3, [pc, #660]	; (8004004 <USB_EPStartXfer+0x2dc>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	0159      	lsls	r1, r3, #5
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	440b      	add	r3, r1
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	4619      	mov	r1, r3
 8003db0:	4b95      	ldr	r3, [pc, #596]	; (8004008 <USB_EPStartXfer+0x2e0>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	610b      	str	r3, [r1, #16]
 8003db6:	e074      	b.n	8003ea2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	0159      	lsls	r1, r3, #5
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	440b      	add	r3, r1
 8003dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4b8c      	ldr	r3, [pc, #560]	; (8004008 <USB_EPStartXfer+0x2e0>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	0159      	lsls	r1, r3, #5
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df4:	4619      	mov	r1, r3
 8003df6:	4b83      	ldr	r3, [pc, #524]	; (8004004 <USB_EPStartXfer+0x2dc>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	6959      	ldr	r1, [r3, #20]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	440b      	add	r3, r1
 8003e14:	1e59      	subs	r1, r3, #1
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e1e:	04d9      	lsls	r1, r3, #19
 8003e20:	4b7a      	ldr	r3, [pc, #488]	; (800400c <USB_EPStartXfer+0x2e4>)
 8003e22:	400b      	ands	r3, r1
 8003e24:	69b9      	ldr	r1, [r7, #24]
 8003e26:	0148      	lsls	r0, r1, #5
 8003e28:	69f9      	ldr	r1, [r7, #28]
 8003e2a:	4401      	add	r1, r0
 8003e2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e30:	4313      	orrs	r3, r2
 8003e32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	0148      	lsls	r0, r1, #5
 8003e4e:	69f9      	ldr	r1, [r7, #28]
 8003e50:	4401      	add	r1, r0
 8003e52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003e56:	4313      	orrs	r3, r2
 8003e58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	78db      	ldrb	r3, [r3, #3]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d11f      	bne.n	8003ea2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003e80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	0151      	lsls	r1, r2, #5
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	440a      	add	r2, r1
 8003e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ea0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d14b      	bne.n	8003f40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d009      	beq.n	8003ec4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	78db      	ldrb	r3, [r3, #3]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d128      	bne.n	8003f1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d110      	bne.n	8003efe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	e00f      	b.n	8003f1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	69fa      	ldr	r2, [r7, #28]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	0151      	lsls	r1, r2, #5
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	440a      	add	r2, r1
 8003f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e133      	b.n	80041a8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	78db      	ldrb	r3, [r3, #3]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d015      	beq.n	8003f94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 811b 	beq.w	80041a8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	2101      	movs	r1, #1
 8003f84:	fa01 f303 	lsl.w	r3, r1, r3
 8003f88:	69f9      	ldr	r1, [r7, #28]
 8003f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	634b      	str	r3, [r1, #52]	; 0x34
 8003f92:	e109      	b.n	80041a8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d110      	bne.n	8003fc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	0151      	lsls	r1, r2, #5
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	440a      	add	r2, r1
 8003fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	e00f      	b.n	8003fe6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	68d9      	ldr	r1, [r3, #12]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781a      	ldrb	r2, [r3, #0]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	b298      	uxth	r0, r3
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fa38 	bl	8004470 <USB_WritePacket>
 8004000:	e0d2      	b.n	80041a8 <USB_EPStartXfer+0x480>
 8004002:	bf00      	nop
 8004004:	e007ffff 	.word	0xe007ffff
 8004008:	fff80000 	.word	0xfff80000
 800400c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	0159      	lsls	r1, r3, #5
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	440b      	add	r3, r1
 8004026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402a:	4619      	mov	r1, r3
 800402c:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <USB_EPStartXfer+0x48c>)
 800402e:	4013      	ands	r3, r2
 8004030:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	0159      	lsls	r1, r3, #5
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	440b      	add	r3, r1
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	4619      	mov	r1, r3
 800404e:	4b5a      	ldr	r3, [pc, #360]	; (80041b8 <USB_EPStartXfer+0x490>)
 8004050:	4013      	ands	r3, r2
 8004052:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d123      	bne.n	80040a4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004072:	69b9      	ldr	r1, [r7, #24]
 8004074:	0148      	lsls	r0, r1, #5
 8004076:	69f9      	ldr	r1, [r7, #28]
 8004078:	4401      	add	r1, r0
 800407a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800407e:	4313      	orrs	r3, r2
 8004080:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	440a      	add	r2, r1
 8004098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800409c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040a0:	6113      	str	r3, [r2, #16]
 80040a2:	e033      	b.n	800410c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4413      	add	r3, r2
 80040ae:	1e5a      	subs	r2, r3, #1
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	8afb      	ldrh	r3, [r7, #22]
 80040ca:	04d9      	lsls	r1, r3, #19
 80040cc:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <USB_EPStartXfer+0x494>)
 80040ce:	400b      	ands	r3, r1
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	0148      	lsls	r0, r1, #5
 80040d4:	69f9      	ldr	r1, [r7, #28]
 80040d6:	4401      	add	r1, r0
 80040d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80040dc:	4313      	orrs	r3, r2
 80040de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	8af9      	ldrh	r1, [r7, #22]
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	0148      	lsls	r0, r1, #5
 8004100:	69f9      	ldr	r1, [r7, #28]
 8004102:	4401      	add	r1, r0
 8004104:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004108:	4313      	orrs	r3, r2
 800410a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d10d      	bne.n	800412e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	68d9      	ldr	r1, [r3, #12]
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412a:	460a      	mov	r2, r1
 800412c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	78db      	ldrb	r3, [r3, #3]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d128      	bne.n	8004188 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d110      	bne.n	8004168 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004160:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00f      	b.n	8004188 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	0151      	lsls	r1, r2, #5
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	440a      	add	r2, r1
 800417e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004186:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	0151      	lsls	r1, r2, #5
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	440a      	add	r2, r1
 800419e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3720      	adds	r7, #32
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	fff80000 	.word	0xfff80000
 80041b8:	e007ffff 	.word	0xe007ffff
 80041bc:	1ff80000 	.word	0x1ff80000

080041c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	4613      	mov	r3, r2
 80041cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	f040 80cd 	bne.w	800437c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d132      	bne.n	8004250 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	0159      	lsls	r1, r3, #5
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	440b      	add	r3, r1
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	4619      	mov	r1, r3
 8004206:	4b98      	ldr	r3, [pc, #608]	; (8004468 <USB_EP0StartXfer+0x2a8>)
 8004208:	4013      	ands	r3, r2
 800420a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	440a      	add	r2, r1
 8004222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800422a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	0159      	lsls	r1, r3, #5
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	440b      	add	r3, r1
 8004242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004246:	4619      	mov	r1, r3
 8004248:	4b88      	ldr	r3, [pc, #544]	; (800446c <USB_EP0StartXfer+0x2ac>)
 800424a:	4013      	ands	r3, r2
 800424c:	610b      	str	r3, [r1, #16]
 800424e:	e04e      	b.n	80042ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	0159      	lsls	r1, r3, #5
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	440b      	add	r3, r1
 8004266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426a:	4619      	mov	r1, r3
 800426c:	4b7f      	ldr	r3, [pc, #508]	; (800446c <USB_EP0StartXfer+0x2ac>)
 800426e:	4013      	ands	r3, r2
 8004270:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	0159      	lsls	r1, r3, #5
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	440b      	add	r3, r1
 8004288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428c:	4619      	mov	r1, r3
 800428e:	4b76      	ldr	r3, [pc, #472]	; (8004468 <USB_EP0StartXfer+0x2a8>)
 8004290:	4013      	ands	r3, r2
 8004292:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	695a      	ldr	r2, [r3, #20]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	d903      	bls.n	80042a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042de:	6939      	ldr	r1, [r7, #16]
 80042e0:	0148      	lsls	r0, r1, #5
 80042e2:	6979      	ldr	r1, [r7, #20]
 80042e4:	4401      	add	r1, r0
 80042e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ea:	4313      	orrs	r3, r2
 80042ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d11e      	bne.n	8004332 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	0151      	lsls	r1, r2, #5
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	440a      	add	r2, r1
 8004326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e092      	b.n	8004458 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	440a      	add	r2, r1
 8004348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004350:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d07e      	beq.n	8004458 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	2101      	movs	r1, #1
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004376:	4313      	orrs	r3, r2
 8004378:	634b      	str	r3, [r1, #52]	; 0x34
 800437a:	e06d      	b.n	8004458 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	691a      	ldr	r2, [r3, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	0159      	lsls	r1, r3, #5
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	440b      	add	r3, r1
 8004392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004396:	4619      	mov	r1, r3
 8004398:	4b34      	ldr	r3, [pc, #208]	; (800446c <USB_EP0StartXfer+0x2ac>)
 800439a:	4013      	ands	r3, r2
 800439c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	0159      	lsls	r1, r3, #5
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	440b      	add	r3, r1
 80043b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b8:	4619      	mov	r1, r3
 80043ba:	4b2b      	ldr	r3, [pc, #172]	; (8004468 <USB_EP0StartXfer+0x2a8>)
 80043bc:	4013      	ands	r3, r2
 80043be:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	0151      	lsls	r1, r2, #5
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	440a      	add	r2, r1
 80043e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004406:	6939      	ldr	r1, [r7, #16]
 8004408:	0148      	lsls	r0, r1, #5
 800440a:	6979      	ldr	r1, [r7, #20]
 800440c:	4401      	add	r1, r0
 800440e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004412:	4313      	orrs	r3, r2
 8004414:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10d      	bne.n	8004438 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	68d9      	ldr	r1, [r3, #12]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	460a      	mov	r2, r1
 8004436:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	440a      	add	r2, r1
 800444e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004452:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004456:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	e007ffff 	.word	0xe007ffff
 800446c:	fff80000 	.word	0xfff80000

08004470 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004470:	b480      	push	{r7}
 8004472:	b089      	sub	sp, #36	; 0x24
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	4611      	mov	r1, r2
 800447c:	461a      	mov	r2, r3
 800447e:	460b      	mov	r3, r1
 8004480:	71fb      	strb	r3, [r7, #7]
 8004482:	4613      	mov	r3, r2
 8004484:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800448e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11a      	bne.n	80044cc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004496:	88bb      	ldrh	r3, [r7, #4]
 8004498:	3303      	adds	r3, #3
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e00f      	b.n	80044c4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	031a      	lsls	r2, r3, #12
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b0:	461a      	mov	r2, r3
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	3304      	adds	r3, #4
 80044bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	3301      	adds	r3, #1
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d3eb      	bcc.n	80044a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	; 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d12c      	bne.n	8004550 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	db12      	blt.n	800452e <USB_EPSetStall+0x54>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00f      	beq.n	800452e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004528:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800452c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	0151      	lsls	r1, r2, #5
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	440a      	add	r2, r1
 8004544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e02b      	b.n	80045a8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	db12      	blt.n	8004588 <USB_EPSetStall+0xae>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00f      	beq.n	8004588 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004582:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004586:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	0151      	lsls	r1, r2, #5
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	440a      	add	r2, r1
 800459e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045d0:	f023 0302 	bic.w	r3, r3, #2
 80045d4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80045d6:	2003      	movs	r0, #3
 80045d8:	f7fc f9c0 	bl	800095c <HAL_Delay>

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004606:	2003      	movs	r0, #3
 8004608:	f7fc f9a8 	bl	800095c <HAL_Delay>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	460b      	mov	r3, r1
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	333c      	adds	r3, #60	; 0x3c
 800462e:	3304      	adds	r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <USB_EP0_OutStart+0xb8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d90a      	bls.n	8004652 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464c:	d101      	bne.n	8004652 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e037      	b.n	80046c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	461a      	mov	r2, r3
 800465a:	2300      	movs	r3, #0
 800465c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004680:	f043 0318 	orr.w	r3, r3, #24
 8004684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004694:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004698:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800469a:	7afb      	ldrb	r3, [r7, #11]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10f      	bne.n	80046c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80046be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	4f54300a 	.word	0x4f54300a

080046d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a13      	ldr	r2, [pc, #76]	; (8004738 <USB_CoreReset+0x64>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e01b      	b.n	800472a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	daf2      	bge.n	80046e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f043 0201 	orr.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3301      	adds	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <USB_CoreReset+0x64>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e006      	b.n	800472a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b01      	cmp	r3, #1
 8004726:	d0f0      	beq.n	800470a <USB_CoreReset+0x36>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	00030d40 	.word	0x00030d40

0800473c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	7c1b      	ldrb	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d115      	bne.n	8004780 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004758:	2202      	movs	r2, #2
 800475a:	2181      	movs	r1, #129	; 0x81
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fe1c 	bl	800539a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800476c:	2202      	movs	r2, #2
 800476e:	2101      	movs	r1, #1
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fe12 	bl	800539a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800477e:	e012      	b.n	80047a6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004780:	2340      	movs	r3, #64	; 0x40
 8004782:	2202      	movs	r2, #2
 8004784:	2181      	movs	r1, #129	; 0x81
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fe07 	bl	800539a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004792:	2340      	movs	r3, #64	; 0x40
 8004794:	2202      	movs	r2, #2
 8004796:	2101      	movs	r1, #1
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fdfe 	bl	800539a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80047a6:	2308      	movs	r3, #8
 80047a8:	2203      	movs	r2, #3
 80047aa:	2182      	movs	r1, #130	; 0x82
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fdf4 	bl	800539a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80047b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80047bc:	f000 ff00 	bl	80055c0 <malloc>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80047d4:	2301      	movs	r3, #1
 80047d6:	73fb      	strb	r3, [r7, #15]
 80047d8:	e026      	b.n	8004828 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	7c1b      	ldrb	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800480a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800480e:	2101      	movs	r1, #1
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fe49 	bl	80054a8 <USBD_LL_PrepareReceive>
 8004816:	e007      	b.n	8004828 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800481e:	2340      	movs	r3, #64	; 0x40
 8004820:	2101      	movs	r1, #1
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fe40 	bl	80054a8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	460b      	mov	r3, r1
 800483c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004842:	2181      	movs	r1, #129	; 0x81
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fdce 	bl	80053e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004850:	2101      	movs	r1, #1
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fdc7 	bl	80053e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004860:	2182      	movs	r1, #130	; 0x82
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fdbf 	bl	80053e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00e      	beq.n	8004896 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fea1 	bl	80055d0 <free>
    pdev->pClassData = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d039      	beq.n	800493e <USBD_CDC_Setup+0x9e>
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d17c      	bne.n	80049c8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	88db      	ldrh	r3, [r3, #6]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d029      	beq.n	800492a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	da11      	bge.n	8004904 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80048ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	88d2      	ldrh	r2, [r2, #6]
 80048f2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80048f4:	6939      	ldr	r1, [r7, #16]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	88db      	ldrh	r3, [r3, #6]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fa80 	bl	8004e02 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004902:	e068      	b.n	80049d6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	785a      	ldrb	r2, [r3, #1]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	88db      	ldrh	r3, [r3, #6]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800491a:	6939      	ldr	r1, [r7, #16]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	88db      	ldrh	r3, [r3, #6]
 8004920:	461a      	mov	r2, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa89 	bl	8004e3a <USBD_CtlPrepareRx>
      break;
 8004928:	e055      	b.n	80049d6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	7850      	ldrb	r0, [r2, #1]
 8004936:	2200      	movs	r2, #0
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	4798      	blx	r3
      break;
 800493c:	e04b      	b.n	80049d6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	2b0a      	cmp	r3, #10
 8004944:	d017      	beq.n	8004976 <USBD_CDC_Setup+0xd6>
 8004946:	2b0b      	cmp	r3, #11
 8004948:	d029      	beq.n	800499e <USBD_CDC_Setup+0xfe>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d133      	bne.n	80049b6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004954:	2b03      	cmp	r3, #3
 8004956:	d107      	bne.n	8004968 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004958:	f107 030c 	add.w	r3, r7, #12
 800495c:	2202      	movs	r2, #2
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fa4e 	bl	8004e02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004966:	e02e      	b.n	80049c6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f9de 	bl	8004d2c <USBD_CtlError>
            ret = USBD_FAIL;
 8004970:	2302      	movs	r3, #2
 8004972:	75fb      	strb	r3, [r7, #23]
          break;
 8004974:	e027      	b.n	80049c6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800497c:	2b03      	cmp	r3, #3
 800497e:	d107      	bne.n	8004990 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004980:	f107 030f 	add.w	r3, r7, #15
 8004984:	2201      	movs	r2, #1
 8004986:	4619      	mov	r1, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fa3a 	bl	8004e02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800498e:	e01a      	b.n	80049c6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f9ca 	bl	8004d2c <USBD_CtlError>
            ret = USBD_FAIL;
 8004998:	2302      	movs	r3, #2
 800499a:	75fb      	strb	r3, [r7, #23]
          break;
 800499c:	e013      	b.n	80049c6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d00d      	beq.n	80049c4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80049a8:	6839      	ldr	r1, [r7, #0]
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f9be 	bl	8004d2c <USBD_CtlError>
            ret = USBD_FAIL;
 80049b0:	2302      	movs	r3, #2
 80049b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80049b4:	e006      	b.n	80049c4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f9b7 	bl	8004d2c <USBD_CtlError>
          ret = USBD_FAIL;
 80049be:	2302      	movs	r3, #2
 80049c0:	75fb      	strb	r3, [r7, #23]
          break;
 80049c2:	e000      	b.n	80049c6 <USBD_CDC_Setup+0x126>
          break;
 80049c4:	bf00      	nop
      }
      break;
 80049c6:	e006      	b.n	80049d6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80049c8:	6839      	ldr	r1, [r7, #0]
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9ae 	bl	8004d2c <USBD_CtlError>
      ret = USBD_FAIL;
 80049d0:	2302      	movs	r3, #2
 80049d2:	75fb      	strb	r3, [r7, #23]
      break;
 80049d4:	bf00      	nop
  }

  return ret;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049fa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d03a      	beq.n	8004a7c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004a06:	78fa      	ldrb	r2, [r7, #3]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	440b      	add	r3, r1
 8004a14:	331c      	adds	r3, #28
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d029      	beq.n	8004a70 <USBD_CDC_DataIn+0x90>
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	331c      	adds	r3, #28
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	78f9      	ldrb	r1, [r7, #3]
 8004a30:	68b8      	ldr	r0, [r7, #8]
 8004a32:	460b      	mov	r3, r1
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	1a5b      	subs	r3, r3, r1
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4403      	add	r3, r0
 8004a3c:	3344      	adds	r3, #68	; 0x44
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a44:	fb03 f301 	mul.w	r3, r3, r1
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d110      	bne.n	8004a70 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	331c      	adds	r3, #28
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a62:	78f9      	ldrb	r1, [r7, #3]
 8004a64:	2300      	movs	r3, #0
 8004a66:	2200      	movs	r2, #0
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fcfa 	bl	8005462 <USBD_LL_Transmit>
 8004a6e:	e003      	b.n	8004a78 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e000      	b.n	8004a7e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004a7c:	2302      	movs	r3, #2
  }
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fd25 	bl	80054ee <USBD_LL_GetRxDataSize>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004aca:	4611      	mov	r1, r2
 8004acc:	4798      	blx	r3

    return USBD_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e000      	b.n	8004ad4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004ad2:	2302      	movs	r3, #2
  }
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d015      	beq.n	8004b22 <USBD_CDC_EP0_RxReady+0x46>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004afc:	2bff      	cmp	r3, #255	; 0xff
 8004afe:	d010      	beq.n	8004b22 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004b0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b16:	b292      	uxth	r2, r2
 8004b18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2243      	movs	r2, #67	; 0x43
 8004b38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004b3a:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	20000098 	.word	0x20000098

08004b4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2243      	movs	r2, #67	; 0x43
 8004b58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004b5a:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	20000054 	.word	0x20000054

08004b6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2243      	movs	r2, #67	; 0x43
 8004b78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004b7a:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	200000dc 	.word	0x200000dc

08004b8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	220a      	movs	r2, #10
 8004b98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004b9a:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	20000010 	.word	0x20000010

08004bac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b087      	sub	sp, #28
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	4613      	mov	r3, r2
 8004be6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bee:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c1e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d017      	beq.n	8004c80 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	7c1b      	ldrb	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c62:	2101      	movs	r1, #1
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fc1f 	bl	80054a8 <USBD_LL_PrepareReceive>
 8004c6a:	e007      	b.n	8004c7c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	2101      	movs	r1, #1
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fc16 	bl	80054a8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004c80:	2302      	movs	r3, #2
  }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	4613      	mov	r3, r2
 8004c96:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e01a      	b.n	8004cd8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	79fa      	ldrb	r2, [r7, #7]
 8004cce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 faf7 	bl	80052c4 <USBD_LL_Init>

  return USBD_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d006      	beq.n	8004d02 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73fb      	strb	r3, [r7, #15]
 8004d00:	e001      	b.n	8004d06 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004d02:	2302      	movs	r3, #2
 8004d04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fb21 	bl	8005364 <USBD_LL_Start>

  return USBD_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004d36:	2180      	movs	r1, #128	; 0x80
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fb73 	bl	8005424 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fb6f 	bl	8005424 <USBD_LL_StallEP>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b086      	sub	sp, #24
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d032      	beq.n	8004dca <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f834 	bl	8004dd2 <USBD_GetLen>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004d78:	7dfb      	ldrb	r3, [r7, #23]
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	75fa      	strb	r2, [r7, #23]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4413      	add	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	7812      	ldrb	r2, [r2, #0]
 8004d88:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	75fa      	strb	r2, [r7, #23]
 8004d90:	461a      	mov	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4413      	add	r3, r2
 8004d96:	2203      	movs	r2, #3
 8004d98:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004d9a:	e012      	b.n	8004dc2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	60fa      	str	r2, [r7, #12]
 8004da2:	7dfa      	ldrb	r2, [r7, #23]
 8004da4:	1c51      	adds	r1, r2, #1
 8004da6:	75f9      	strb	r1, [r7, #23]
 8004da8:	4611      	mov	r1, r2
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	440a      	add	r2, r1
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	75fa      	strb	r2, [r7, #23]
 8004db8:	461a      	mov	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e8      	bne.n	8004d9c <USBD_GetString+0x4e>
    }
  }
}
 8004dca:	bf00      	nop
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8004dde:	e005      	b.n	8004dec <USBD_GetLen+0x1a>
  {
    len++;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	3301      	adds	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3301      	adds	r3, #1
 8004dea:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f5      	bne.n	8004de0 <USBD_GetLen+0xe>
  }

  return len;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004e1e:	88fa      	ldrh	r2, [r7, #6]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004e24:	88fb      	ldrh	r3, [r7, #6]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	2100      	movs	r1, #0
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fb19 	bl	8005462 <USBD_LL_Transmit>

  return USBD_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004e50:	88fa      	ldrh	r2, [r7, #6]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8004e58:	88fa      	ldrh	r2, [r7, #6]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	2100      	movs	r1, #0
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 fb1e 	bl	80054a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4913      	ldr	r1, [pc, #76]	; (8004ecc <MX_USB_DEVICE_Init+0x54>)
 8004e80:	4813      	ldr	r0, [pc, #76]	; (8004ed0 <MX_USB_DEVICE_Init+0x58>)
 8004e82:	f7ff ff02 	bl	8004c8a <USBD_Init>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004e8c:	f7fb fc18 	bl	80006c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004e90:	4910      	ldr	r1, [pc, #64]	; (8004ed4 <MX_USB_DEVICE_Init+0x5c>)
 8004e92:	480f      	ldr	r0, [pc, #60]	; (8004ed0 <MX_USB_DEVICE_Init+0x58>)
 8004e94:	f7ff ff24 	bl	8004ce0 <USBD_RegisterClass>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8004e9e:	f7fb fc0f 	bl	80006c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004ea2:	490d      	ldr	r1, [pc, #52]	; (8004ed8 <MX_USB_DEVICE_Init+0x60>)
 8004ea4:	480a      	ldr	r0, [pc, #40]	; (8004ed0 <MX_USB_DEVICE_Init+0x58>)
 8004ea6:	f7ff fe81 	bl	8004bac <USBD_CDC_RegisterInterface>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8004eb0:	f7fb fc06 	bl	80006c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004eb4:	4806      	ldr	r0, [pc, #24]	; (8004ed0 <MX_USB_DEVICE_Init+0x58>)
 8004eb6:	f7ff ff2d 	bl	8004d14 <USBD_Start>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8004ec0:	f7fb fbfe 	bl	80006c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8004ec4:	f7fc fc3e 	bl	8001744 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004ec8:	bf00      	nop
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000130 	.word	0x20000130
 8004ed0:	20000210 	.word	0x20000210
 8004ed4:	2000001c 	.word	0x2000001c
 8004ed8:	20000120 	.word	0x20000120

08004edc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4905      	ldr	r1, [pc, #20]	; (8004ef8 <CDC_Init_FS+0x1c>)
 8004ee4:	4805      	ldr	r0, [pc, #20]	; (8004efc <CDC_Init_FS+0x20>)
 8004ee6:	f7ff fe78 	bl	8004bda <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004eea:	4905      	ldr	r1, [pc, #20]	; (8004f00 <CDC_Init_FS+0x24>)
 8004eec:	4803      	ldr	r0, [pc, #12]	; (8004efc <CDC_Init_FS+0x20>)
 8004eee:	f7ff fe8e 	bl	8004c0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8004ef2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	20000cd4 	.word	0x20000cd4
 8004efc:	20000210 	.word	0x20000210
 8004f00:	200004d4 	.word	0x200004d4

08004f04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8004f08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	6039      	str	r1, [r7, #0]
 8004f1e:	71fb      	strb	r3, [r7, #7]
 8004f20:	4613      	mov	r3, r2
 8004f22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	2b23      	cmp	r3, #35	; 0x23
 8004f28:	d84a      	bhi.n	8004fc0 <CDC_Control_FS+0xac>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <CDC_Control_FS+0x1c>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004fc1 	.word	0x08004fc1
 8004f34:	08004fc1 	.word	0x08004fc1
 8004f38:	08004fc1 	.word	0x08004fc1
 8004f3c:	08004fc1 	.word	0x08004fc1
 8004f40:	08004fc1 	.word	0x08004fc1
 8004f44:	08004fc1 	.word	0x08004fc1
 8004f48:	08004fc1 	.word	0x08004fc1
 8004f4c:	08004fc1 	.word	0x08004fc1
 8004f50:	08004fc1 	.word	0x08004fc1
 8004f54:	08004fc1 	.word	0x08004fc1
 8004f58:	08004fc1 	.word	0x08004fc1
 8004f5c:	08004fc1 	.word	0x08004fc1
 8004f60:	08004fc1 	.word	0x08004fc1
 8004f64:	08004fc1 	.word	0x08004fc1
 8004f68:	08004fc1 	.word	0x08004fc1
 8004f6c:	08004fc1 	.word	0x08004fc1
 8004f70:	08004fc1 	.word	0x08004fc1
 8004f74:	08004fc1 	.word	0x08004fc1
 8004f78:	08004fc1 	.word	0x08004fc1
 8004f7c:	08004fc1 	.word	0x08004fc1
 8004f80:	08004fc1 	.word	0x08004fc1
 8004f84:	08004fc1 	.word	0x08004fc1
 8004f88:	08004fc1 	.word	0x08004fc1
 8004f8c:	08004fc1 	.word	0x08004fc1
 8004f90:	08004fc1 	.word	0x08004fc1
 8004f94:	08004fc1 	.word	0x08004fc1
 8004f98:	08004fc1 	.word	0x08004fc1
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc1 	.word	0x08004fc1
 8004fa4:	08004fc1 	.word	0x08004fc1
 8004fa8:	08004fc1 	.word	0x08004fc1
 8004fac:	08004fc1 	.word	0x08004fc1
 8004fb0:	08004fc1 	.word	0x08004fc1
 8004fb4:	08004fc1 	.word	0x08004fc1
 8004fb8:	08004fc1 	.word	0x08004fc1
 8004fbc:	08004fc1 	.word	0x08004fc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8004fc0:	bf00      	nop
  }

  return (USBD_OK);
 8004fc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4805      	ldr	r0, [pc, #20]	; (8004ff4 <CDC_Receive_FS+0x24>)
 8004fde:	f7ff fe16 	bl	8004c0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004fe2:	4804      	ldr	r0, [pc, #16]	; (8004ff4 <CDC_Receive_FS+0x24>)
 8004fe4:	f7ff fe27 	bl	8004c36 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8004fe8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000210 	.word	0x20000210

08004ff8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	6039      	str	r1, [r7, #0]
 8005002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2212      	movs	r2, #18
 8005008:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800500a:	4b03      	ldr	r3, [pc, #12]	; (8005018 <USBD_FS_DeviceDescriptor+0x20>)
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	2000014c 	.word	0x2000014c

0800501c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	6039      	str	r1, [r7, #0]
 8005026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2204      	movs	r2, #4
 800502c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800502e:	4b03      	ldr	r3, [pc, #12]	; (800503c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	20000160 	.word	0x20000160

08005040 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	6039      	str	r1, [r7, #0]
 800504a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	4907      	ldr	r1, [pc, #28]	; (8005074 <USBD_FS_ProductStrDescriptor+0x34>)
 8005056:	4808      	ldr	r0, [pc, #32]	; (8005078 <USBD_FS_ProductStrDescriptor+0x38>)
 8005058:	f7ff fe79 	bl	8004d4e <USBD_GetString>
 800505c:	e004      	b.n	8005068 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	4904      	ldr	r1, [pc, #16]	; (8005074 <USBD_FS_ProductStrDescriptor+0x34>)
 8005062:	4805      	ldr	r0, [pc, #20]	; (8005078 <USBD_FS_ProductStrDescriptor+0x38>)
 8005064:	f7ff fe73 	bl	8004d4e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005068:	4b02      	ldr	r3, [pc, #8]	; (8005074 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	200014d4 	.word	0x200014d4
 8005078:	0800577c 	.word	0x0800577c

0800507c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	6039      	str	r1, [r7, #0]
 8005086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	4904      	ldr	r1, [pc, #16]	; (800509c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800508c:	4804      	ldr	r0, [pc, #16]	; (80050a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800508e:	f7ff fe5e 	bl	8004d4e <USBD_GetString>
  return USBD_StrDesc;
 8005092:	4b02      	ldr	r3, [pc, #8]	; (800509c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200014d4 	.word	0x200014d4
 80050a0:	08005794 	.word	0x08005794

080050a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	6039      	str	r1, [r7, #0]
 80050ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	221a      	movs	r2, #26
 80050b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80050b6:	f000 f843 	bl	8005140 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80050ba:	4b02      	ldr	r3, [pc, #8]	; (80050c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20000164 	.word	0x20000164

080050c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	6039      	str	r1, [r7, #0]
 80050d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	4907      	ldr	r1, [pc, #28]	; (80050fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80050de:	4808      	ldr	r0, [pc, #32]	; (8005100 <USBD_FS_ConfigStrDescriptor+0x38>)
 80050e0:	f7ff fe35 	bl	8004d4e <USBD_GetString>
 80050e4:	e004      	b.n	80050f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	4904      	ldr	r1, [pc, #16]	; (80050fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80050ea:	4805      	ldr	r0, [pc, #20]	; (8005100 <USBD_FS_ConfigStrDescriptor+0x38>)
 80050ec:	f7ff fe2f 	bl	8004d4e <USBD_GetString>
  }
  return USBD_StrDesc;
 80050f0:	4b02      	ldr	r3, [pc, #8]	; (80050fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200014d4 	.word	0x200014d4
 8005100:	080057a8 	.word	0x080057a8

08005104 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	6039      	str	r1, [r7, #0]
 800510e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d105      	bne.n	8005122 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	4907      	ldr	r1, [pc, #28]	; (8005138 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800511a:	4808      	ldr	r0, [pc, #32]	; (800513c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800511c:	f7ff fe17 	bl	8004d4e <USBD_GetString>
 8005120:	e004      	b.n	800512c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	4904      	ldr	r1, [pc, #16]	; (8005138 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005126:	4805      	ldr	r0, [pc, #20]	; (800513c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005128:	f7ff fe11 	bl	8004d4e <USBD_GetString>
  }
  return USBD_StrDesc;
 800512c:	4b02      	ldr	r3, [pc, #8]	; (8005138 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	200014d4 	.word	0x200014d4
 800513c:	080057b4 	.word	0x080057b4

08005140 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005146:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <Get_SerialNum+0x44>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800514c:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <Get_SerialNum+0x48>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <Get_SerialNum+0x4c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4413      	add	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005166:	2208      	movs	r2, #8
 8005168:	4909      	ldr	r1, [pc, #36]	; (8005190 <Get_SerialNum+0x50>)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f814 	bl	8005198 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005170:	2204      	movs	r2, #4
 8005172:	4908      	ldr	r1, [pc, #32]	; (8005194 <Get_SerialNum+0x54>)
 8005174:	68b8      	ldr	r0, [r7, #8]
 8005176:	f000 f80f 	bl	8005198 <IntToUnicode>
  }
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	1ff1e800 	.word	0x1ff1e800
 8005188:	1ff1e804 	.word	0x1ff1e804
 800518c:	1ff1e808 	.word	0x1ff1e808
 8005190:	20000166 	.word	0x20000166
 8005194:	20000176 	.word	0x20000176

08005198 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	75fb      	strb	r3, [r7, #23]
 80051ae:	e027      	b.n	8005200 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	0f1b      	lsrs	r3, r3, #28
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	d80b      	bhi.n	80051d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	0f1b      	lsrs	r3, r3, #28
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	7dfb      	ldrb	r3, [r7, #23]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	4619      	mov	r1, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	440b      	add	r3, r1
 80051c8:	3230      	adds	r2, #48	; 0x30
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	e00a      	b.n	80051e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	0f1b      	lsrs	r3, r3, #28
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4619      	mov	r1, r3
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	440b      	add	r3, r1
 80051e0:	3237      	adds	r2, #55	; 0x37
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	3301      	adds	r3, #1
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	4413      	add	r3, r2
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	3301      	adds	r3, #1
 80051fe:	75fb      	strb	r3, [r7, #23]
 8005200:	7dfa      	ldrb	r2, [r7, #23]
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	429a      	cmp	r2, r3
 8005206:	d3d3      	bcc.n	80051b0 <IntToUnicode+0x18>
  }
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	605a      	str	r2, [r3, #4]
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a21      	ldr	r2, [pc, #132]	; (80052b8 <HAL_PCD_MspInit+0xa4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d13b      	bne.n	80052ae <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005236:	4b21      	ldr	r3, [pc, #132]	; (80052bc <HAL_PCD_MspInit+0xa8>)
 8005238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800523c:	4a1f      	ldr	r2, [pc, #124]	; (80052bc <HAL_PCD_MspInit+0xa8>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <HAL_PCD_MspInit+0xa8>)
 8005248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM 
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 8005254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800525a:	2300      	movs	r3, #0
 800525c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8005262:	f107 0314 	add.w	r3, r7, #20
 8005266:	4619      	mov	r1, r3
 8005268:	4815      	ldr	r0, [pc, #84]	; (80052c0 <HAL_PCD_MspInit+0xac>)
 800526a:	f7fb fc9d 	bl	8000ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800526e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005274:	2302      	movs	r3, #2
 8005276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800527c:	2300      	movs	r3, #0
 800527e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8005280:	230a      	movs	r3, #10
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005284:	f107 0314 	add.w	r3, r7, #20
 8005288:	4619      	mov	r1, r3
 800528a:	480d      	ldr	r0, [pc, #52]	; (80052c0 <HAL_PCD_MspInit+0xac>)
 800528c:	f7fb fc8c 	bl	8000ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <HAL_PCD_MspInit+0xa8>)
 8005292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <HAL_PCD_MspInit+0xa8>)
 8005298:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800529c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80052a0:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_PCD_MspInit+0xa8>)
 80052a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80052ae:	bf00      	nop
 80052b0:	3728      	adds	r7, #40	; 0x28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40080000 	.word	0x40080000
 80052bc:	58024400 	.word	0x58024400
 80052c0:	58020000 	.word	0x58020000

080052c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d13e      	bne.n	8005352 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80052d4:	4a21      	ldr	r2, [pc, #132]	; (800535c <USBD_LL_Init+0x98>)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1f      	ldr	r2, [pc, #124]	; (800535c <USBD_LL_Init+0x98>)
 80052e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80052e4:	4b1d      	ldr	r3, [pc, #116]	; (800535c <USBD_LL_Init+0x98>)
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <USBD_LL_Init+0x9c>)
 80052e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80052ea:	4b1c      	ldr	r3, [pc, #112]	; (800535c <USBD_LL_Init+0x98>)
 80052ec:	2209      	movs	r2, #9
 80052ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80052f0:	4b1a      	ldr	r3, [pc, #104]	; (800535c <USBD_LL_Init+0x98>)
 80052f2:	2202      	movs	r2, #2
 80052f4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80052f6:	4b19      	ldr	r3, [pc, #100]	; (800535c <USBD_LL_Init+0x98>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80052fc:	4b17      	ldr	r3, [pc, #92]	; (800535c <USBD_LL_Init+0x98>)
 80052fe:	2202      	movs	r2, #2
 8005300:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005302:	4b16      	ldr	r3, [pc, #88]	; (800535c <USBD_LL_Init+0x98>)
 8005304:	2200      	movs	r2, #0
 8005306:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005308:	4b14      	ldr	r3, [pc, #80]	; (800535c <USBD_LL_Init+0x98>)
 800530a:	2200      	movs	r2, #0
 800530c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <USBD_LL_Init+0x98>)
 8005310:	2200      	movs	r2, #0
 8005312:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8005314:	4b11      	ldr	r3, [pc, #68]	; (800535c <USBD_LL_Init+0x98>)
 8005316:	2201      	movs	r2, #1
 8005318:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800531a:	4b10      	ldr	r3, [pc, #64]	; (800535c <USBD_LL_Init+0x98>)
 800531c:	2201      	movs	r2, #1
 800531e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005320:	4b0e      	ldr	r3, [pc, #56]	; (800535c <USBD_LL_Init+0x98>)
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005326:	480d      	ldr	r0, [pc, #52]	; (800535c <USBD_LL_Init+0x98>)
 8005328:	f7fb fe1c 	bl	8000f64 <HAL_PCD_Init>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8005332:	f7fb f9c5 	bl	80006c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	4808      	ldr	r0, [pc, #32]	; (800535c <USBD_LL_Init+0x98>)
 800533a:	f7fc f974 	bl	8001626 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800533e:	2240      	movs	r2, #64	; 0x40
 8005340:	2100      	movs	r1, #0
 8005342:	4806      	ldr	r0, [pc, #24]	; (800535c <USBD_LL_Init+0x98>)
 8005344:	f7fc f928 	bl	8001598 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005348:	2280      	movs	r2, #128	; 0x80
 800534a:	2101      	movs	r1, #1
 800534c:	4803      	ldr	r0, [pc, #12]	; (800535c <USBD_LL_Init+0x98>)
 800534e:	f7fc f923 	bl	8001598 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	200016d4 	.word	0x200016d4
 8005360:	40080000 	.word	0x40080000

08005364 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800537a:	4618      	mov	r0, r3
 800537c:	f7fb ff16 	bl	80011ac <HAL_PCD_Start>
 8005380:	4603      	mov	r3, r0
 8005382:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f8c4 	bl	8005514 <USBD_Get_USB_Status>
 800538c:	4603      	mov	r3, r0
 800538e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005390:	7bbb      	ldrb	r3, [r7, #14]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	4608      	mov	r0, r1
 80053a4:	4611      	mov	r1, r2
 80053a6:	461a      	mov	r2, r3
 80053a8:	4603      	mov	r3, r0
 80053aa:	70fb      	strb	r3, [r7, #3]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70bb      	strb	r3, [r7, #2]
 80053b0:	4613      	mov	r3, r2
 80053b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80053c2:	78bb      	ldrb	r3, [r7, #2]
 80053c4:	883a      	ldrh	r2, [r7, #0]
 80053c6:	78f9      	ldrb	r1, [r7, #3]
 80053c8:	f7fb ff23 	bl	8001212 <HAL_PCD_EP_Open>
 80053cc:	4603      	mov	r3, r0
 80053ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 f89e 	bl	8005514 <USBD_Get_USB_Status>
 80053d8:	4603      	mov	r3, r0
 80053da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80053dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	4611      	mov	r1, r2
 8005404:	4618      	mov	r0, r3
 8005406:	f7fb ff6c 	bl	80012e2 <HAL_PCD_EP_Close>
 800540a:	4603      	mov	r3, r0
 800540c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800540e:	7bfb      	ldrb	r3, [r7, #15]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f87f 	bl	8005514 <USBD_Get_USB_Status>
 8005416:	4603      	mov	r3, r0
 8005418:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800541a:	7bbb      	ldrb	r3, [r7, #14]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800543e:	78fa      	ldrb	r2, [r7, #3]
 8005440:	4611      	mov	r1, r2
 8005442:	4618      	mov	r0, r3
 8005444:	f7fc f844 	bl	80014d0 <HAL_PCD_EP_SetStall>
 8005448:	4603      	mov	r3, r0
 800544a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f860 	bl	8005514 <USBD_Get_USB_Status>
 8005454:	4603      	mov	r3, r0
 8005456:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005458:	7bbb      	ldrb	r3, [r7, #14]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	461a      	mov	r2, r3
 800546e:	460b      	mov	r3, r1
 8005470:	72fb      	strb	r3, [r7, #11]
 8005472:	4613      	mov	r3, r2
 8005474:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005484:	893b      	ldrh	r3, [r7, #8]
 8005486:	7af9      	ldrb	r1, [r7, #11]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	f7fb ffd7 	bl	800143c <HAL_PCD_EP_Transmit>
 800548e:	4603      	mov	r3, r0
 8005490:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f83d 	bl	8005514 <USBD_Get_USB_Status>
 800549a:	4603      	mov	r3, r0
 800549c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800549e:	7dbb      	ldrb	r3, [r7, #22]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	461a      	mov	r2, r3
 80054b4:	460b      	mov	r3, r1
 80054b6:	72fb      	strb	r3, [r7, #11]
 80054b8:	4613      	mov	r3, r2
 80054ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80054ca:	893b      	ldrh	r3, [r7, #8]
 80054cc:	7af9      	ldrb	r1, [r7, #11]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	f7fb ff51 	bl	8001376 <HAL_PCD_EP_Receive>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f81a 	bl	8005514 <USBD_Get_USB_Status>
 80054e0:	4603      	mov	r3, r0
 80054e2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80054e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	4611      	mov	r1, r2
 8005504:	4618      	mov	r0, r3
 8005506:	f7fb ff81 	bl	800140c <HAL_PCD_EP_GetRxCount>
 800550a:	4603      	mov	r3, r0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d817      	bhi.n	8005558 <USBD_Get_USB_Status+0x44>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <USBD_Get_USB_Status+0x1c>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005541 	.word	0x08005541
 8005534:	08005547 	.word	0x08005547
 8005538:	0800554d 	.word	0x0800554d
 800553c:	08005553 	.word	0x08005553
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	73fb      	strb	r3, [r7, #15]
    break;
 8005544:	e00b      	b.n	800555e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005546:	2302      	movs	r3, #2
 8005548:	73fb      	strb	r3, [r7, #15]
    break;
 800554a:	e008      	b.n	800555e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
    break;
 8005550:	e005      	b.n	800555e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005552:	2302      	movs	r3, #2
 8005554:	73fb      	strb	r3, [r7, #15]
    break;
 8005556:	e002      	b.n	800555e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005558:	2302      	movs	r3, #2
 800555a:	73fb      	strb	r3, [r7, #15]
    break;
 800555c:	bf00      	nop
  }
  return usb_status;
 800555e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <__errno>:
 800556c:	4b01      	ldr	r3, [pc, #4]	; (8005574 <__errno+0x8>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000180 	.word	0x20000180

08005578 <__libc_init_array>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	4e0d      	ldr	r6, [pc, #52]	; (80055b0 <__libc_init_array+0x38>)
 800557c:	4c0d      	ldr	r4, [pc, #52]	; (80055b4 <__libc_init_array+0x3c>)
 800557e:	1ba4      	subs	r4, r4, r6
 8005580:	10a4      	asrs	r4, r4, #2
 8005582:	2500      	movs	r5, #0
 8005584:	42a5      	cmp	r5, r4
 8005586:	d109      	bne.n	800559c <__libc_init_array+0x24>
 8005588:	4e0b      	ldr	r6, [pc, #44]	; (80055b8 <__libc_init_array+0x40>)
 800558a:	4c0c      	ldr	r4, [pc, #48]	; (80055bc <__libc_init_array+0x44>)
 800558c:	f000 f8ea 	bl	8005764 <_init>
 8005590:	1ba4      	subs	r4, r4, r6
 8005592:	10a4      	asrs	r4, r4, #2
 8005594:	2500      	movs	r5, #0
 8005596:	42a5      	cmp	r5, r4
 8005598:	d105      	bne.n	80055a6 <__libc_init_array+0x2e>
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055a0:	4798      	blx	r3
 80055a2:	3501      	adds	r5, #1
 80055a4:	e7ee      	b.n	8005584 <__libc_init_array+0xc>
 80055a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055aa:	4798      	blx	r3
 80055ac:	3501      	adds	r5, #1
 80055ae:	e7f2      	b.n	8005596 <__libc_init_array+0x1e>
 80055b0:	080057d4 	.word	0x080057d4
 80055b4:	080057d4 	.word	0x080057d4
 80055b8:	080057d4 	.word	0x080057d4
 80055bc:	080057d8 	.word	0x080057d8

080055c0 <malloc>:
 80055c0:	4b02      	ldr	r3, [pc, #8]	; (80055cc <malloc+0xc>)
 80055c2:	4601      	mov	r1, r0
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	f000 b861 	b.w	800568c <_malloc_r>
 80055ca:	bf00      	nop
 80055cc:	20000180 	.word	0x20000180

080055d0 <free>:
 80055d0:	4b02      	ldr	r3, [pc, #8]	; (80055dc <free+0xc>)
 80055d2:	4601      	mov	r1, r0
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	f000 b80b 	b.w	80055f0 <_free_r>
 80055da:	bf00      	nop
 80055dc:	20000180 	.word	0x20000180

080055e0 <memset>:
 80055e0:	4402      	add	r2, r0
 80055e2:	4603      	mov	r3, r0
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d100      	bne.n	80055ea <memset+0xa>
 80055e8:	4770      	bx	lr
 80055ea:	f803 1b01 	strb.w	r1, [r3], #1
 80055ee:	e7f9      	b.n	80055e4 <memset+0x4>

080055f0 <_free_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4605      	mov	r5, r0
 80055f4:	2900      	cmp	r1, #0
 80055f6:	d045      	beq.n	8005684 <_free_r+0x94>
 80055f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055fc:	1f0c      	subs	r4, r1, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	bfb8      	it	lt
 8005602:	18e4      	addlt	r4, r4, r3
 8005604:	f000 f8ac 	bl	8005760 <__malloc_lock>
 8005608:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <_free_r+0x98>)
 800560a:	6813      	ldr	r3, [r2, #0]
 800560c:	4610      	mov	r0, r2
 800560e:	b933      	cbnz	r3, 800561e <_free_r+0x2e>
 8005610:	6063      	str	r3, [r4, #4]
 8005612:	6014      	str	r4, [r2, #0]
 8005614:	4628      	mov	r0, r5
 8005616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800561a:	f000 b8a2 	b.w	8005762 <__malloc_unlock>
 800561e:	42a3      	cmp	r3, r4
 8005620:	d90c      	bls.n	800563c <_free_r+0x4c>
 8005622:	6821      	ldr	r1, [r4, #0]
 8005624:	1862      	adds	r2, r4, r1
 8005626:	4293      	cmp	r3, r2
 8005628:	bf04      	itt	eq
 800562a:	681a      	ldreq	r2, [r3, #0]
 800562c:	685b      	ldreq	r3, [r3, #4]
 800562e:	6063      	str	r3, [r4, #4]
 8005630:	bf04      	itt	eq
 8005632:	1852      	addeq	r2, r2, r1
 8005634:	6022      	streq	r2, [r4, #0]
 8005636:	6004      	str	r4, [r0, #0]
 8005638:	e7ec      	b.n	8005614 <_free_r+0x24>
 800563a:	4613      	mov	r3, r2
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	b10a      	cbz	r2, 8005644 <_free_r+0x54>
 8005640:	42a2      	cmp	r2, r4
 8005642:	d9fa      	bls.n	800563a <_free_r+0x4a>
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	1858      	adds	r0, r3, r1
 8005648:	42a0      	cmp	r0, r4
 800564a:	d10b      	bne.n	8005664 <_free_r+0x74>
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	4401      	add	r1, r0
 8005650:	1858      	adds	r0, r3, r1
 8005652:	4282      	cmp	r2, r0
 8005654:	6019      	str	r1, [r3, #0]
 8005656:	d1dd      	bne.n	8005614 <_free_r+0x24>
 8005658:	6810      	ldr	r0, [r2, #0]
 800565a:	6852      	ldr	r2, [r2, #4]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	4401      	add	r1, r0
 8005660:	6019      	str	r1, [r3, #0]
 8005662:	e7d7      	b.n	8005614 <_free_r+0x24>
 8005664:	d902      	bls.n	800566c <_free_r+0x7c>
 8005666:	230c      	movs	r3, #12
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	e7d3      	b.n	8005614 <_free_r+0x24>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	1821      	adds	r1, r4, r0
 8005670:	428a      	cmp	r2, r1
 8005672:	bf04      	itt	eq
 8005674:	6811      	ldreq	r1, [r2, #0]
 8005676:	6852      	ldreq	r2, [r2, #4]
 8005678:	6062      	str	r2, [r4, #4]
 800567a:	bf04      	itt	eq
 800567c:	1809      	addeq	r1, r1, r0
 800567e:	6021      	streq	r1, [r4, #0]
 8005680:	605c      	str	r4, [r3, #4]
 8005682:	e7c7      	b.n	8005614 <_free_r+0x24>
 8005684:	bd38      	pop	{r3, r4, r5, pc}
 8005686:	bf00      	nop
 8005688:	20000204 	.word	0x20000204

0800568c <_malloc_r>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	1ccd      	adds	r5, r1, #3
 8005690:	f025 0503 	bic.w	r5, r5, #3
 8005694:	3508      	adds	r5, #8
 8005696:	2d0c      	cmp	r5, #12
 8005698:	bf38      	it	cc
 800569a:	250c      	movcc	r5, #12
 800569c:	2d00      	cmp	r5, #0
 800569e:	4606      	mov	r6, r0
 80056a0:	db01      	blt.n	80056a6 <_malloc_r+0x1a>
 80056a2:	42a9      	cmp	r1, r5
 80056a4:	d903      	bls.n	80056ae <_malloc_r+0x22>
 80056a6:	230c      	movs	r3, #12
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	2000      	movs	r0, #0
 80056ac:	bd70      	pop	{r4, r5, r6, pc}
 80056ae:	f000 f857 	bl	8005760 <__malloc_lock>
 80056b2:	4a21      	ldr	r2, [pc, #132]	; (8005738 <_malloc_r+0xac>)
 80056b4:	6814      	ldr	r4, [r2, #0]
 80056b6:	4621      	mov	r1, r4
 80056b8:	b991      	cbnz	r1, 80056e0 <_malloc_r+0x54>
 80056ba:	4c20      	ldr	r4, [pc, #128]	; (800573c <_malloc_r+0xb0>)
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	b91b      	cbnz	r3, 80056c8 <_malloc_r+0x3c>
 80056c0:	4630      	mov	r0, r6
 80056c2:	f000 f83d 	bl	8005740 <_sbrk_r>
 80056c6:	6020      	str	r0, [r4, #0]
 80056c8:	4629      	mov	r1, r5
 80056ca:	4630      	mov	r0, r6
 80056cc:	f000 f838 	bl	8005740 <_sbrk_r>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d124      	bne.n	800571e <_malloc_r+0x92>
 80056d4:	230c      	movs	r3, #12
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	4630      	mov	r0, r6
 80056da:	f000 f842 	bl	8005762 <__malloc_unlock>
 80056de:	e7e4      	b.n	80056aa <_malloc_r+0x1e>
 80056e0:	680b      	ldr	r3, [r1, #0]
 80056e2:	1b5b      	subs	r3, r3, r5
 80056e4:	d418      	bmi.n	8005718 <_malloc_r+0x8c>
 80056e6:	2b0b      	cmp	r3, #11
 80056e8:	d90f      	bls.n	800570a <_malloc_r+0x7e>
 80056ea:	600b      	str	r3, [r1, #0]
 80056ec:	50cd      	str	r5, [r1, r3]
 80056ee:	18cc      	adds	r4, r1, r3
 80056f0:	4630      	mov	r0, r6
 80056f2:	f000 f836 	bl	8005762 <__malloc_unlock>
 80056f6:	f104 000b 	add.w	r0, r4, #11
 80056fa:	1d23      	adds	r3, r4, #4
 80056fc:	f020 0007 	bic.w	r0, r0, #7
 8005700:	1ac3      	subs	r3, r0, r3
 8005702:	d0d3      	beq.n	80056ac <_malloc_r+0x20>
 8005704:	425a      	negs	r2, r3
 8005706:	50e2      	str	r2, [r4, r3]
 8005708:	e7d0      	b.n	80056ac <_malloc_r+0x20>
 800570a:	428c      	cmp	r4, r1
 800570c:	684b      	ldr	r3, [r1, #4]
 800570e:	bf16      	itet	ne
 8005710:	6063      	strne	r3, [r4, #4]
 8005712:	6013      	streq	r3, [r2, #0]
 8005714:	460c      	movne	r4, r1
 8005716:	e7eb      	b.n	80056f0 <_malloc_r+0x64>
 8005718:	460c      	mov	r4, r1
 800571a:	6849      	ldr	r1, [r1, #4]
 800571c:	e7cc      	b.n	80056b8 <_malloc_r+0x2c>
 800571e:	1cc4      	adds	r4, r0, #3
 8005720:	f024 0403 	bic.w	r4, r4, #3
 8005724:	42a0      	cmp	r0, r4
 8005726:	d005      	beq.n	8005734 <_malloc_r+0xa8>
 8005728:	1a21      	subs	r1, r4, r0
 800572a:	4630      	mov	r0, r6
 800572c:	f000 f808 	bl	8005740 <_sbrk_r>
 8005730:	3001      	adds	r0, #1
 8005732:	d0cf      	beq.n	80056d4 <_malloc_r+0x48>
 8005734:	6025      	str	r5, [r4, #0]
 8005736:	e7db      	b.n	80056f0 <_malloc_r+0x64>
 8005738:	20000204 	.word	0x20000204
 800573c:	20000208 	.word	0x20000208

08005740 <_sbrk_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	4c06      	ldr	r4, [pc, #24]	; (800575c <_sbrk_r+0x1c>)
 8005744:	2300      	movs	r3, #0
 8005746:	4605      	mov	r5, r0
 8005748:	4608      	mov	r0, r1
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	f7fb f808 	bl	8000760 <_sbrk>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d102      	bne.n	800575a <_sbrk_r+0x1a>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	b103      	cbz	r3, 800575a <_sbrk_r+0x1a>
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	20001adc 	.word	0x20001adc

08005760 <__malloc_lock>:
 8005760:	4770      	bx	lr

08005762 <__malloc_unlock>:
 8005762:	4770      	bx	lr

08005764 <_init>:
 8005764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005766:	bf00      	nop
 8005768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576a:	bc08      	pop	{r3}
 800576c:	469e      	mov	lr, r3
 800576e:	4770      	bx	lr

08005770 <_fini>:
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005772:	bf00      	nop
 8005774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005776:	bc08      	pop	{r3}
 8005778:	469e      	mov	lr, r3
 800577a:	4770      	bx	lr
